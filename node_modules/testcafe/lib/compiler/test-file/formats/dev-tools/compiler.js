"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const raw_1 = __importDefault(require("../raw"));
const factory_1 = require("./commands/factory");
const switch_to_iframe_1 = require("./commands/switch-to-iframe");
const switch_to_main_window_1 = require("./commands/switch-to-main-window");
const TEST_BASE = JSON.stringify({
    fixtures: [
        {
            name: 'New Fixture',
            tests: [
                {
                    name: 'New Test',
                    commands: [],
                },
            ],
        },
    ],
});
class DevToolsTestFileCompiler extends raw_1.default {
    constructor() {
        super(...arguments);
        this.raw = { fixtures: [] };
    }
    _hasTests() {
        return true;
    }
    get _fixture() {
        return this.raw.fixtures[0];
    }
    get _test() {
        return this._fixture.tests[0];
    }
    getSupportedExtension() {
        return '.json';
    }
    compile(code, filename) {
        this.raw = JSON.parse(TEST_BASE);
        return super.compile(this._preProcess(code), filename);
    }
    _preProcess(code) {
        const parsedCode = JSON.parse(code);
        this._fixture.name = parsedCode.title;
        this._test.name = parsedCode.title;
        parsedCode.steps.forEach((step, i) => this._processStep(step, i));
        return JSON.stringify(this.raw);
    }
    _processStep(step, i) {
        const transformer = factory_1.CommandTransformerFactory.create(step, i);
        if (transformer) {
            this._onBeforeCommandExecute(step);
            this._test.commands.push(transformer.transform());
            this._onAfterCommandExecute(step);
        }
    }
    _onBeforeCommandExecute(step) {
        if (!step.frame)
            return;
        const frames = step.frame;
        for (const frame of frames)
            this._test.commands.push(new switch_to_iframe_1.SwitchToIframeCommandTransformer({ frame }, 0).transform());
    }
    _onAfterCommandExecute(step) {
        this._test.commands.push(new switch_to_main_window_1.SwitchToMainWindowCommandTransformer(step, 0).transform());
    }
}
exports.default = DevToolsTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZGV2LXRvb2xzL2NvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaURBQXlDO0FBRXpDLGdEQUErRDtBQUMvRCxrRUFBK0U7QUFDL0UsNEVBQXdGO0FBU3hGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDN0IsUUFBUSxFQUFFO1FBQ047WUFDSSxJQUFJLEVBQUcsYUFBYTtZQUNwQixLQUFLLEVBQUU7Z0JBQ0g7b0JBQ0ksSUFBSSxFQUFNLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSxFQUFFO2lCQUNmO2FBQ0o7U0FDSjtLQUNKO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBcUIsd0JBQXlCLFNBQVEsYUFBbUI7SUFBekU7O1FBQ1ksUUFBRyxHQUFpQixFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQTBEakQsQ0FBQztJQXhERyxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFFLElBQVksRUFBRSxRQUFnQjtRQUNuQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELFdBQVcsQ0FBRSxJQUFZO1FBQ3JCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBTSxVQUFVLENBQUMsS0FBSyxDQUFDO1FBRXRDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBMEIsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEcsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFBWSxDQUFFLElBQTBCLEVBQUUsQ0FBUztRQUMvQyxNQUFNLFdBQVcsR0FBRyxtQ0FBeUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckM7SUFDTCxDQUFDO0lBRUQsdUJBQXVCLENBQUUsSUFBMEI7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ1gsT0FBTztRQUVYLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFpQixDQUFDO1FBRXRDLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTTtZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxtREFBZ0MsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELHNCQUFzQixDQUFFLElBQTBCO1FBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLDREQUFvQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7Q0FDSjtBQTNERCwyQ0EyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmF3VGVzdEZpbGVDb21waWxlciBmcm9tICcuLi9yYXcnO1xuaW1wb3J0IFRlc3QgZnJvbSAnLi4vLi4vLi4vLi4vYXBpL3N0cnVjdHVyZS90ZXN0JztcbmltcG9ydCB7IENvbW1hbmRUcmFuc2Zvcm1lckZhY3RvcnkgfSBmcm9tICcuL2NvbW1hbmRzL2ZhY3RvcnknO1xuaW1wb3J0IHsgU3dpdGNoVG9JZnJhbWVDb21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL2NvbW1hbmRzL3N3aXRjaC10by1pZnJhbWUnO1xuaW1wb3J0IHsgU3dpdGNoVG9NYWluV2luZG93Q29tbWFuZFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9jb21tYW5kcy9zd2l0Y2gtdG8tbWFpbi13aW5kb3cnO1xuXG5pbXBvcnQge1xuICAgIERldlRvb2xzUmVjb3JkZXJTdGVwLFxuICAgIFJhd0ZpeHR1cmUsXG4gICAgUmF3UmVjb3JkaW5nLFxuICAgIFJhd1Rlc3QsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBURVNUX0JBU0UgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgZml4dHVyZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogICdOZXcgRml4dHVyZScsXG4gICAgICAgICAgICB0ZXN0czogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogICAgICdOZXcgVGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzOiBbXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldlRvb2xzVGVzdEZpbGVDb21waWxlciBleHRlbmRzIFJhd1Rlc3RGaWxlQ29tcGlsZXIge1xuICAgIHByaXZhdGUgcmF3OiBSYXdSZWNvcmRpbmcgPSB7IGZpeHR1cmVzOiBbXSB9O1xuXG4gICAgX2hhc1Rlc3RzICgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IF9maXh0dXJlICgpOiBSYXdGaXh0dXJlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3LmZpeHR1cmVzWzBdO1xuICAgIH1cblxuICAgIGdldCBfdGVzdCAoKTogUmF3VGVzdCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXh0dXJlLnRlc3RzWzBdO1xuICAgIH1cblxuICAgIGdldFN1cHBvcnRlZEV4dGVuc2lvbiAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICcuanNvbic7XG4gICAgfVxuXG4gICAgY29tcGlsZSAoY29kZTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogVGVzdFtdIHtcbiAgICAgICAgdGhpcy5yYXcgPSBKU09OLnBhcnNlKFRFU1RfQkFTRSk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmNvbXBpbGUodGhpcy5fcHJlUHJvY2Vzcyhjb2RlKSwgZmlsZW5hbWUpO1xuICAgIH1cblxuICAgIF9wcmVQcm9jZXNzIChjb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwYXJzZWRDb2RlID0gSlNPTi5wYXJzZShjb2RlKTtcblxuICAgICAgICB0aGlzLl9maXh0dXJlLm5hbWUgPSBwYXJzZWRDb2RlLnRpdGxlO1xuICAgICAgICB0aGlzLl90ZXN0Lm5hbWUgICAgPSBwYXJzZWRDb2RlLnRpdGxlO1xuXG4gICAgICAgIHBhcnNlZENvZGUuc3RlcHMuZm9yRWFjaCgoc3RlcDogRGV2VG9vbHNSZWNvcmRlclN0ZXAsIGk6IG51bWJlcikgPT4gdGhpcy5fcHJvY2Vzc1N0ZXAoc3RlcCwgaSkpO1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnJhdyk7XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NTdGVwIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCwgaTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gQ29tbWFuZFRyYW5zZm9ybWVyRmFjdG9yeS5jcmVhdGUoc3RlcCwgaSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkJlZm9yZUNvbW1hbmRFeGVjdXRlKHN0ZXApO1xuICAgICAgICAgICAgdGhpcy5fdGVzdC5jb21tYW5kcy5wdXNoKHRyYW5zZm9ybWVyLnRyYW5zZm9ybSgpKTtcbiAgICAgICAgICAgIHRoaXMuX29uQWZ0ZXJDb21tYW5kRXhlY3V0ZShzdGVwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkJlZm9yZUNvbW1hbmRFeGVjdXRlIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCk6IHZvaWQge1xuICAgICAgICBpZiAoIXN0ZXAuZnJhbWUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZnJhbWVzID0gc3RlcC5mcmFtZSBhcyBudW1iZXJbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGZyYW1lcylcbiAgICAgICAgICAgIHRoaXMuX3Rlc3QuY29tbWFuZHMucHVzaChuZXcgU3dpdGNoVG9JZnJhbWVDb21tYW5kVHJhbnNmb3JtZXIoeyBmcmFtZSB9LCAwKS50cmFuc2Zvcm0oKSk7XG4gICAgfVxuXG4gICAgX29uQWZ0ZXJDb21tYW5kRXhlY3V0ZSAoc3RlcDogRGV2VG9vbHNSZWNvcmRlclN0ZXApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdGVzdC5jb21tYW5kcy5wdXNoKG5ldyBTd2l0Y2hUb01haW5XaW5kb3dDb21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgMCkudHJhbnNmb3JtKCkpO1xuICAgIH1cbn1cbiJdfQ==