"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const delay_1 = __importDefault(require("../../core/utils/delay"));
// @ts-ignore
const hammerhead_1 = require("../deps/hammerhead");
const REQUESTS_COLLECTION_DELAY_DEFAULT = 50;
class RequestBarrier {
    constructor(emitter, delays = {}) {
        var _a, _b, _c;
        this._delays = {
            requestsCollection: (_a = delays.requestsCollection) !== null && _a !== void 0 ? _a : REQUESTS_COLLECTION_DELAY_DEFAULT,
            additionalRequestsCollection: (_b = delays.additionalRequestsCollection) !== null && _b !== void 0 ? _b : REQUESTS_COLLECTION_DELAY_DEFAULT,
            pageInitialRequestsCollection: (_c = delays.pageInitialRequestsCollection) !== null && _c !== void 0 ? _c : REQUESTS_COLLECTION_DELAY_DEFAULT,
        };
        this._emitter = emitter;
        this._waitResolve = null;
        this._watchdog = null;
        this._requests = new Set();
        this._collectingReqs = true;
        this._startListening();
    }
    _startListening() {
        this._emitter.onRequestSend((req) => this._onRequestSend(req));
        this._emitter.onRequestCompleted((req) => this._onRequestCompleted(req));
        this._emitter.onRequestError((req) => this._onRequestError(req));
    }
    _offListening() {
        this._emitter.offAll();
    }
    _onRequestSend(req) {
        if (this._collectingReqs)
            this._requests.add(req);
    }
    _onRequestCompleted(req) {
        // NOTE: let the last real XHR handler finish its job and try to obtain
        // any additional requests if they were initiated by this handler
        delay_1.default(this._delays.additionalRequestsCollection)
            .then(() => this._onRequestFinished(req));
    }
    _onRequestFinished(req) {
        if (!this._requests.has(req))
            return;
        this._requests.delete(req);
        if (!this._collectingReqs && !this._requests.size && this._watchdog)
            this._finishWaiting();
    }
    _onRequestError(req) {
        this._onRequestFinished(req);
    }
    _finishWaiting() {
        if (this._watchdog) {
            const clearTimeout = hammerhead_1.nativeMethods.clearTimeout;
            clearTimeout(this._watchdog);
            this._watchdog = null;
        }
        this._requests.clear();
        this._offListening();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    }
    wait(isPageLoad) {
        return delay_1.default(isPageLoad ? this._delays.pageInitialRequestsCollection : this._delays.requestsCollection)
            .then(() => new hammerhead_1.Promise((resolve) => {
            this._collectingReqs = false;
            this._waitResolve = resolve;
            if (!this._requests.size) {
                this._finishWaiting();
                return;
            }
            const setTimeout = hammerhead_1.nativeMethods.setTimeout;
            this._watchdog = setTimeout(() => this._finishWaiting(), RequestBarrier.TIMEOUT);
        }));
    }
}
exports.default = RequestBarrier;
RequestBarrier.TIMEOUT = 3000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvZHJpdmVyL2JhcnJpZXJzL3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtRUFBMkM7QUFFM0MsYUFBYTtBQUNiLG1EQUE0RDtBQVM1RCxNQUFNLGlDQUFpQyxHQUFHLEVBQUUsQ0FBQztBQUU3QyxNQUFxQixjQUFjO0lBVS9CLFlBQW9CLE9BQWdDLEVBQUUsU0FBMEIsRUFBRTs7UUFDOUUsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNYLGtCQUFrQixRQUFhLE1BQU0sQ0FBQyxrQkFBa0IsbUNBQUksaUNBQWlDO1lBQzdGLDRCQUE0QixRQUFHLE1BQU0sQ0FBQyw0QkFBNEIsbUNBQUksaUNBQWlDO1lBQ3ZHLDZCQUE2QixRQUFFLE1BQU0sQ0FBQyw2QkFBNkIsbUNBQUksaUNBQWlDO1NBQzNHLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxHQUFVLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFNLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFTLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFTLElBQUksR0FBRyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFNUIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxlQUFlO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU8sYUFBYTtRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxjQUFjLENBQUUsR0FBTTtRQUMxQixJQUFJLElBQUksQ0FBQyxlQUFlO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxtQkFBbUIsQ0FBRSxHQUFNO1FBQy9CLHVFQUF1RTtRQUN2RSxpRUFBaUU7UUFDakUsZUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUM7YUFDM0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxrQkFBa0IsQ0FBRSxHQUFNO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDeEIsT0FBTztRQUVYLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTyxlQUFlLENBQUUsR0FBTTtRQUMzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLE1BQU0sWUFBWSxHQUFHLDBCQUFhLENBQUMsWUFBWSxDQUFDO1lBRWhELFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBYSxFQUFFLENBQUMsQ0FBQywrREFBK0Q7SUFDekYsQ0FBQztJQUVNLElBQUksQ0FBRSxVQUFvQjtRQUM3QixPQUFPLGVBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7YUFDbEcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksb0JBQU8sQ0FBQyxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUM1QyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztZQUM3QixJQUFJLENBQUMsWUFBWSxHQUFNLE9BQU8sQ0FBQztZQUUvQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFFdEIsT0FBTzthQUNWO1lBRUQsTUFBTSxVQUFVLEdBQUcsMEJBQWEsQ0FBQyxVQUFVLENBQUM7WUFFNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osQ0FBQzs7QUE1RkwsaUNBNkZDO0FBNUYyQixzQkFBTyxHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWxheSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL2RlbGF5JztcbmltcG9ydCB7IE5hdGl2ZU1ldGhvZHMsIENsaWVudFJlcXVlc3RFbWl0dGVyIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3R5cGVzJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IG5hdGl2ZU1ldGhvZHMsIFByb21pc2UgfSBmcm9tICcuLi9kZXBzL2hhbW1lcmhlYWQnO1xuXG5cbmludGVyZmFjZSBEZWxheXMge1xuICAgIHJlcXVlc3RzQ29sbGVjdGlvbjogbnVtYmVyO1xuICAgIGFkZGl0aW9uYWxSZXF1ZXN0c0NvbGxlY3Rpb246IG51bWJlcjtcbiAgICBwYWdlSW5pdGlhbFJlcXVlc3RzQ29sbGVjdGlvbjogbnVtYmVyO1xufVxuXG5jb25zdCBSRVFVRVNUU19DT0xMRUNUSU9OX0RFTEFZX0RFRkFVTFQgPSA1MDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdEJhcnJpZXI8Uj4ge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRJTUVPVVQgPSAzMDAwO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGVsYXlzOiBEZWxheXM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVxdWVzdHM6IFNldDxSPjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbWl0dGVyOiBDbGllbnRSZXF1ZXN0RW1pdHRlcjxSPjtcbiAgICBwcml2YXRlIF93YWl0UmVzb2x2ZTogKCgpID0+IHZvaWQpIHwgbnVsbDtcbiAgICBwcml2YXRlIF93YXRjaGRvZzogUmV0dXJuVHlwZTxOYXRpdmVNZXRob2RzWydzZXRUaW1lb3V0J10+IHwgbnVsbDtcbiAgICBwcm90ZWN0ZWQgX2NvbGxlY3RpbmdSZXFzOiBib29sZWFuO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChlbWl0dGVyOiBDbGllbnRSZXF1ZXN0RW1pdHRlcjxSPiwgZGVsYXlzOiBQYXJ0aWFsPERlbGF5cz4gPSB7fSkge1xuICAgICAgICB0aGlzLl9kZWxheXMgPSB7XG4gICAgICAgICAgICByZXF1ZXN0c0NvbGxlY3Rpb246ICAgICAgICAgICAgZGVsYXlzLnJlcXVlc3RzQ29sbGVjdGlvbiA/PyBSRVFVRVNUU19DT0xMRUNUSU9OX0RFTEFZX0RFRkFVTFQsXG4gICAgICAgICAgICBhZGRpdGlvbmFsUmVxdWVzdHNDb2xsZWN0aW9uOiAgZGVsYXlzLmFkZGl0aW9uYWxSZXF1ZXN0c0NvbGxlY3Rpb24gPz8gUkVRVUVTVFNfQ09MTEVDVElPTl9ERUxBWV9ERUZBVUxULFxuICAgICAgICAgICAgcGFnZUluaXRpYWxSZXF1ZXN0c0NvbGxlY3Rpb246IGRlbGF5cy5wYWdlSW5pdGlhbFJlcXVlc3RzQ29sbGVjdGlvbiA/PyBSRVFVRVNUU19DT0xMRUNUSU9OX0RFTEFZX0RFRkFVTFQsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZW1pdHRlciAgICAgICAgPSBlbWl0dGVyO1xuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSAgICA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dhdGNoZG9nICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVxdWVzdHMgICAgICAgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuX2NvbGxlY3RpbmdSZXFzID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9zdGFydExpc3RlbmluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3N0YXJ0TGlzdGVuaW5nICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5vblJlcXVlc3RTZW5kKChyZXE6IFIpID0+IHRoaXMuX29uUmVxdWVzdFNlbmQocmVxKSk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25SZXF1ZXN0Q29tcGxldGVkKChyZXE6IFIpID0+IHRoaXMuX29uUmVxdWVzdENvbXBsZXRlZChyZXEpKTtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5vblJlcXVlc3RFcnJvcigocmVxOiBSKSA9PiB0aGlzLl9vblJlcXVlc3RFcnJvcihyZXEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vZmZMaXN0ZW5pbmcgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9mZkFsbCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uUmVxdWVzdFNlbmQgKHJlcTogUik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fY29sbGVjdGluZ1JlcXMpXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5hZGQocmVxKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vblJlcXVlc3RDb21wbGV0ZWQgKHJlcTogUik6IHZvaWQge1xuICAgICAgICAvLyBOT1RFOiBsZXQgdGhlIGxhc3QgcmVhbCBYSFIgaGFuZGxlciBmaW5pc2ggaXRzIGpvYiBhbmQgdHJ5IHRvIG9idGFpblxuICAgICAgICAvLyBhbnkgYWRkaXRpb25hbCByZXF1ZXN0cyBpZiB0aGV5IHdlcmUgaW5pdGlhdGVkIGJ5IHRoaXMgaGFuZGxlclxuICAgICAgICBkZWxheSh0aGlzLl9kZWxheXMuYWRkaXRpb25hbFJlcXVlc3RzQ29sbGVjdGlvbilcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuX29uUmVxdWVzdEZpbmlzaGVkKHJlcSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uUmVxdWVzdEZpbmlzaGVkIChyZXE6IFIpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0cy5oYXMocmVxKSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aGlzLl9yZXF1ZXN0cy5kZWxldGUocmVxKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2NvbGxlY3RpbmdSZXFzICYmICF0aGlzLl9yZXF1ZXN0cy5zaXplICYmIHRoaXMuX3dhdGNoZG9nKVxuICAgICAgICAgICAgdGhpcy5fZmluaXNoV2FpdGluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uUmVxdWVzdEVycm9yIChyZXE6IFIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fb25SZXF1ZXN0RmluaXNoZWQocmVxKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9maW5pc2hXYWl0aW5nICgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhdGNoZG9nKSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhclRpbWVvdXQgPSBuYXRpdmVNZXRob2RzLmNsZWFyVGltZW91dDtcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3dhdGNoZG9nKTtcblxuICAgICAgICAgICAgdGhpcy5fd2F0Y2hkb2cgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVxdWVzdHMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fb2ZmTGlzdGVuaW5nKCk7XG4gICAgICAgIHRoaXMuX3dhaXRSZXNvbHZlISgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICB9XG5cbiAgICBwdWJsaWMgd2FpdCAoaXNQYWdlTG9hZD86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIGRlbGF5KGlzUGFnZUxvYWQgPyB0aGlzLl9kZWxheXMucGFnZUluaXRpYWxSZXF1ZXN0c0NvbGxlY3Rpb24gOiB0aGlzLl9kZWxheXMucmVxdWVzdHNDb2xsZWN0aW9uKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xsZWN0aW5nUmVxcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dhaXRSZXNvbHZlICAgID0gcmVzb2x2ZTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVxdWVzdHMuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hXYWl0aW5nKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHNldFRpbWVvdXQgPSBuYXRpdmVNZXRob2RzLnNldFRpbWVvdXQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl93YXRjaGRvZyA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fZmluaXNoV2FpdGluZygpLCBSZXF1ZXN0QmFycmllci5USU1FT1VUKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICB9XG59XG4iXX0=