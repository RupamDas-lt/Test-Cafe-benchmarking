"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const delay_1 = __importDefault(require("../../core/utils/delay"));
// @ts-ignore
const hammerhead_1 = require("../deps/hammerhead");
const WAIT_FOR_NEW_SCRIPTS_DELAY = 25;
class ScriptExecutionBarrier {
    constructor(emitter) {
        this._emitter = emitter;
        this._watchdog = null;
        this._waitResolve = null;
        this._scripts = new Map();
        this._startListening();
    }
    _startListening() {
        this._emitter.onScriptAdded((script) => this._onScriptElementAdded(script));
        this._emitter.onScriptLoadedOrFailed((script) => this._onScriptLoadedOrFailed(script));
    }
    _offListening() {
        this._emitter.offAll();
    }
    _onScriptElementAdded(script) {
        const setTimeout = hammerhead_1.nativeMethods.setTimeout;
        const timeoutFn = () => this._onScriptLoadedOrFailed(script, true);
        const loadingTimeout = setTimeout(timeoutFn, ScriptExecutionBarrier.LOADING_TIMEOUT);
        this._scripts.set(script, loadingTimeout);
    }
    _onScriptLoadedOrFailed(script, isTimeout = false) {
        if (!this._scripts.has(script))
            return;
        if (!isTimeout) {
            const clearTimeout = hammerhead_1.nativeMethods.clearTimeout;
            clearTimeout(this._scripts.get(script));
        }
        this._scripts.delete(script);
        if (this._scripts.size)
            return;
        delay_1.default(WAIT_FOR_NEW_SCRIPTS_DELAY)
            .then(() => {
            if (this._waitResolve && !this._scripts.size)
                this._finishWaiting();
        });
    }
    _finishWaiting() {
        if (this._watchdog) {
            const clearTimeout = hammerhead_1.nativeMethods.clearTimeout;
            clearTimeout(this._watchdog);
            this._watchdog = null;
        }
        this._scripts.clear();
        this._offListening();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
        this._waitResolve = null;
    }
    wait() {
        return new hammerhead_1.Promise((resolve) => {
            this._waitResolve = resolve;
            if (!this._scripts.size) {
                this._finishWaiting();
                return;
            }
            const setTimeout = hammerhead_1.nativeMethods.setTimeout;
            this._watchdog = setTimeout(() => this._finishWaiting(), ScriptExecutionBarrier.TIMEOUT);
        });
    }
}
exports.default = ScriptExecutionBarrier;
ScriptExecutionBarrier.TIMEOUT = 3000;
ScriptExecutionBarrier.LOADING_TIMEOUT = 2000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvZHJpdmVyL2JhcnJpZXJzL3NjcmlwdC1leGVjdXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtRUFBMkM7QUFFM0MsYUFBYTtBQUNiLG1EQUE0RDtBQUk1RCxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUV0QyxNQUFxQixzQkFBc0I7SUFTdkMsWUFBb0IsT0FBa0M7UUFDbEQsSUFBSSxDQUFDLFFBQVEsR0FBTyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBTSxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBTyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU8sZUFBZTtRQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVPLGFBQWE7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU8scUJBQXFCLENBQUUsTUFBUztRQUNwQyxNQUFNLFVBQVUsR0FBTywwQkFBYSxDQUFDLFVBQVUsQ0FBQztRQUNoRCxNQUFNLFNBQVMsR0FBUSxHQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlFLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFckYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyx1QkFBdUIsQ0FBRSxNQUFTLEVBQUUsU0FBUyxHQUFHLEtBQUs7UUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUMxQixPQUFPO1FBRVgsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE1BQU0sWUFBWSxHQUFHLDBCQUFhLENBQUMsWUFBWSxDQUFDO1lBRWhELFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQWlCLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQ2xCLE9BQU87UUFFWCxlQUFLLENBQUMsMEJBQTBCLENBQUM7YUFDNUIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNQLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLE1BQU0sWUFBWSxHQUFHLDBCQUFhLENBQUMsWUFBWSxDQUFDO1lBRWhELFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBYSxFQUFFLENBQUMsQ0FBQywrREFBK0Q7UUFFckYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVNLElBQUk7UUFDUCxPQUFPLElBQUksb0JBQU8sQ0FBQyxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFFdEIsT0FBTzthQUNWO1lBRUQsTUFBTSxVQUFVLEdBQUcsMEJBQWEsQ0FBQyxVQUFVLENBQUM7WUFFNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUF2RkwseUNBd0ZDO0FBdkYyQiw4QkFBTyxHQUFHLElBQUksQ0FBQztBQUNmLHNDQUFlLEdBQUcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlbGF5IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMvZGVsYXknO1xuaW1wb3J0IHsgU2NyaXB0RXhlY3V0aW9uRW1pdHRlciwgTmF0aXZlTWV0aG9kcyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC90eXBlcyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBuYXRpdmVNZXRob2RzLCBQcm9taXNlIH0gZnJvbSAnLi4vZGVwcy9oYW1tZXJoZWFkJztcblxudHlwZSBUaW1lb3V0TGFiZWwgPSBSZXR1cm5UeXBlPE5hdGl2ZU1ldGhvZHNbJ3NldFRpbWVvdXQnXT47XG5cbmNvbnN0IFdBSVRfRk9SX05FV19TQ1JJUFRTX0RFTEFZID0gMjU7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmlwdEV4ZWN1dGlvbkJhcnJpZXI8Uz4ge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRJTUVPVVQgPSAzMDAwO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExPQURJTkdfVElNRU9VVCA9IDIwMDA7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbWl0dGVyOiBTY3JpcHRFeGVjdXRpb25FbWl0dGVyPFM+O1xuICAgIHByaXZhdGUgX3dhaXRSZXNvbHZlOiAoKCkgPT4gdm9pZCkgfCBudWxsO1xuICAgIHByaXZhdGUgX3dhdGNoZG9nOiBUaW1lb3V0TGFiZWwgfCBudWxsO1xuICAgIHByaXZhdGUgX3NjcmlwdHM6IE1hcDxTLCBUaW1lb3V0TGFiZWw+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChlbWl0dGVyOiBTY3JpcHRFeGVjdXRpb25FbWl0dGVyPFM+KSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgICAgID0gZW1pdHRlcjtcbiAgICAgICAgdGhpcy5fd2F0Y2hkb2cgICAgPSBudWxsO1xuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NjcmlwdHMgICAgID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0TGlzdGVuaW5nKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc3RhcnRMaXN0ZW5pbmcgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uU2NyaXB0QWRkZWQoKHNjcmlwdDogUykgPT4gdGhpcy5fb25TY3JpcHRFbGVtZW50QWRkZWQoc2NyaXB0KSk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25TY3JpcHRMb2FkZWRPckZhaWxlZCgoc2NyaXB0OiBTKSA9PiB0aGlzLl9vblNjcmlwdExvYWRlZE9yRmFpbGVkKHNjcmlwdCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29mZkxpc3RlbmluZyAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub2ZmQWxsKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25TY3JpcHRFbGVtZW50QWRkZWQgKHNjcmlwdDogUyk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZXRUaW1lb3V0ICAgICA9IG5hdGl2ZU1ldGhvZHMuc2V0VGltZW91dDtcbiAgICAgICAgY29uc3QgdGltZW91dEZuICAgICAgPSAoKTogdm9pZCA9PiB0aGlzLl9vblNjcmlwdExvYWRlZE9yRmFpbGVkKHNjcmlwdCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdUaW1lb3V0ID0gc2V0VGltZW91dCh0aW1lb3V0Rm4sIFNjcmlwdEV4ZWN1dGlvbkJhcnJpZXIuTE9BRElOR19USU1FT1VUKTtcblxuICAgICAgICB0aGlzLl9zY3JpcHRzLnNldChzY3JpcHQsIGxvYWRpbmdUaW1lb3V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vblNjcmlwdExvYWRlZE9yRmFpbGVkIChzY3JpcHQ6IFMsIGlzVGltZW91dCA9IGZhbHNlKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fc2NyaXB0cy5oYXMoc2NyaXB0KSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpZiAoIWlzVGltZW91dCkge1xuICAgICAgICAgICAgY29uc3QgY2xlYXJUaW1lb3V0ID0gbmF0aXZlTWV0aG9kcy5jbGVhclRpbWVvdXQ7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zY3JpcHRzLmdldChzY3JpcHQpIGFzIFRpbWVvdXRMYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zY3JpcHRzLmRlbGV0ZShzY3JpcHQpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zY3JpcHRzLnNpemUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZGVsYXkoV0FJVF9GT1JfTkVXX1NDUklQVFNfREVMQVkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dhaXRSZXNvbHZlICYmICF0aGlzLl9zY3JpcHRzLnNpemUpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaFdhaXRpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2ZpbmlzaFdhaXRpbmcgKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fd2F0Y2hkb2cpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFyVGltZW91dCA9IG5hdGl2ZU1ldGhvZHMuY2xlYXJUaW1lb3V0O1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fd2F0Y2hkb2cpO1xuXG4gICAgICAgICAgICB0aGlzLl93YXRjaGRvZyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zY3JpcHRzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX29mZkxpc3RlbmluZygpO1xuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSEoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG5cbiAgICAgICAgdGhpcy5fd2FpdFJlc29sdmUgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyB3YWl0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fc2NyaXB0cy5zaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoV2FpdGluZygpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzZXRUaW1lb3V0ID0gbmF0aXZlTWV0aG9kcy5zZXRUaW1lb3V0O1xuXG4gICAgICAgICAgICB0aGlzLl93YXRjaGRvZyA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fZmluaXNoV2FpdGluZygpLCBTY3JpcHRFeGVjdXRpb25CYXJyaWVyLlRJTUVPVVQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=