"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArrayOfNodes = exports.castToArray = exports.isNodeCollection = exports.visible = void 0;
// @ts-ignore
const hammerhead_1 = require("../../../deps/hammerhead");
// @ts-ignore
const testcafe_core_1 = require("../../../deps/testcafe-core");
// @ts-ignore
const testcafe_ui_1 = require("../../../deps/testcafe-ui");
function visible(el) {
    if (testcafe_core_1.domUtils.isIframeElement(el))
        return testcafe_core_1.positionUtils.isIframeVisible(el);
    if (!hammerhead_1.utils.dom.isDomElement(el) && !hammerhead_1.utils.dom.isTextNode(el))
        return false;
    if (testcafe_core_1.domUtils.isOptionElement(el) || testcafe_core_1.domUtils.getTagName(el) === 'optgroup')
        return testcafe_ui_1.selectElement.isOptionElementVisible(el);
    return testcafe_core_1.positionUtils.isElementVisible(el);
}
exports.visible = visible;
function isNodeCollection(obj) {
    return obj instanceof hammerhead_1.nativeMethods.HTMLCollection || obj instanceof hammerhead_1.nativeMethods.NodeList;
}
exports.isNodeCollection = isNodeCollection;
function castToArray(list) {
    const length = list.length;
    const result = [];
    for (let i = 0; i < length; i++)
        result.push(list[i]);
    return result;
}
exports.castToArray = castToArray;
function isArrayOfNodes(obj) {
    if (!hammerhead_1.nativeMethods.isArray(obj))
        return false;
    for (let i = 0; i < obj.length; i++) {
        // @ts-ignore
        if (!(obj[i] instanceof hammerhead_1.nativeMethods.Node))
            return false;
    }
    return true;
}
exports.isArrayOfNodes = isArrayOfNodes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L2RyaXZlci9jb21tYW5kLWV4ZWN1dG9ycy9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9yLWV4ZWN1dG9yL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGFBQWE7QUFDYix5REFBZ0U7QUFDaEUsYUFBYTtBQUNiLCtEQUFzRTtBQUN0RSxhQUFhO0FBQ2IsMkRBQTBEO0FBRzFELFNBQWdCLE9BQU8sQ0FBRSxFQUFRO0lBQzdCLElBQUksd0JBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sNkJBQWEsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFN0MsSUFBSSxDQUFDLGtCQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDeEQsT0FBTyxLQUFLLENBQUM7SUFFakIsSUFBSSx3QkFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsSUFBSSx3QkFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFhLENBQUMsS0FBSyxVQUFVO1FBQ2pGLE9BQU8sMkJBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwRCxPQUFPLDZCQUFhLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQVhELDBCQVdDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUUsR0FBWTtJQUMxQyxPQUFPLEdBQUcsWUFBWSwwQkFBYSxDQUFDLGNBQWMsSUFBSSxHQUFHLFlBQVksMEJBQWEsQ0FBQyxRQUFRLENBQUM7QUFDaEcsQ0FBQztBQUZELDRDQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFFLElBQStCO0lBQ3hELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFekIsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQVJELGtDQVFDO0FBRUQsU0FBZ0IsY0FBYyxDQUFFLEdBQVk7SUFDeEMsSUFBSSxDQUFDLDBCQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUMzQixPQUFPLEtBQUssQ0FBQztJQUVqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUksR0FBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN6QyxhQUFhO1FBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLDBCQUFhLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLE9BQU8sS0FBSyxDQUFDO0tBQ3BCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQVhELHdDQVdDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgbmF0aXZlTWV0aG9kcywgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9kZXBzL2hhbW1lcmhlYWQnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgZG9tVXRpbHMsIHBvc2l0aW9uVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9kZXBzL3Rlc3RjYWZlLWNvcmUnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgc2VsZWN0RWxlbWVudCB9IGZyb20gJy4uLy4uLy4uL2RlcHMvdGVzdGNhZmUtdWknO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpYmxlIChlbDogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmIChkb21VdGlscy5pc0lmcmFtZUVsZW1lbnQoZWwpKVxuICAgICAgICByZXR1cm4gcG9zaXRpb25VdGlscy5pc0lmcmFtZVZpc2libGUoZWwpO1xuXG4gICAgaWYgKCF1dGlscy5kb20uaXNEb21FbGVtZW50KGVsKSAmJiAhdXRpbHMuZG9tLmlzVGV4dE5vZGUoZWwpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoZG9tVXRpbHMuaXNPcHRpb25FbGVtZW50KGVsKSB8fCBkb21VdGlscy5nZXRUYWdOYW1lKGVsIGFzIEVsZW1lbnQpID09PSAnb3B0Z3JvdXAnKVxuICAgICAgICByZXR1cm4gc2VsZWN0RWxlbWVudC5pc09wdGlvbkVsZW1lbnRWaXNpYmxlKGVsKTtcblxuICAgIHJldHVybiBwb3NpdGlvblV0aWxzLmlzRWxlbWVudFZpc2libGUoZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlQ29sbGVjdGlvbiAob2JqOiB1bmtub3duKTogb2JqIGlzIEhUTUxDb2xsZWN0aW9uIHwgTm9kZUxpc3Qge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBuYXRpdmVNZXRob2RzLkhUTUxDb2xsZWN0aW9uIHx8IG9iaiBpbnN0YW5jZW9mIG5hdGl2ZU1ldGhvZHMuTm9kZUxpc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXN0VG9BcnJheSAobGlzdDogSFRNTENvbGxlY3Rpb24gfCBOb2RlTGlzdCk6IE5vZGVbXSB7XG4gICAgY29uc3QgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICByZXN1bHQucHVzaChsaXN0W2ldKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5T2ZOb2RlcyAob2JqOiB1bmtub3duKTogb2JqIGlzIE5vZGVbXSB7XG4gICAgaWYgKCFuYXRpdmVNZXRob2RzLmlzQXJyYXkob2JqKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAob2JqIGFzIFtdKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICghKG9ialtpXSBpbnN0YW5jZW9mIG5hdGl2ZU1ldGhvZHMuTm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG4iXX0=