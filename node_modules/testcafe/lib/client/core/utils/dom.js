"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIframeWindow = exports.isDocumentElement = exports.getDocumentElement = exports.getImgMapName = exports.getNodeText = exports.isNodeEqual = exports.contains = exports.isShadowElement = exports.setElementValue = exports.getElementValue = exports.setTextAreaValue = exports.setInputValue = exports.getTextAreaValue = exports.getInputValue = exports.getChildNodesLength = exports.getChildrenLength = exports.getCommonAncestor = exports.isEditableFormElement = exports.findIframeByWindow = exports.isTopWindow = exports.isIFrameWindowInDOM = exports.remove = exports.getFocusableParent = exports.getElementDescription = exports.isTheSameNode = exports.getElementIndexInParent = exports.isOptionGroupElement = exports.isElementContainsNode = exports.isEditableElement = exports.blocksImplicitSubmission = exports.getTextareaPositionByLineAndOffset = exports.getTextareaLineNumberByPosition = exports.getTextareaIndentInLine = exports.containsElement = exports.getTabIndexAttributeIntValue = exports.getFocusableElements = exports.getParentExceptShadowRoot = exports.getTopSameDomainWindow = exports.findParent = exports.getParents = exports.closest = exports.getTagName = exports.getMapContainer = exports.getScrollbarSize = exports.isElementReadOnly = exports.isHammerheadAttr = exports.isElementFocusable = exports.isShadowRoot = exports.isShadowUIElement = exports.isDomElement = exports.isContentEditableElement = exports.isTextEditableElementAndEditingAllowed = exports.isTextEditableElement = exports.isTextEditableInput = exports.isWindow = exports.isDocument = exports.isHtmlElement = exports.isBodyElement = exports.isMapElement = exports.isSVGElement = exports.isOptionElement = exports.isCheckboxElement = exports.isColorInputElement = exports.isRadioButtonElement = exports.isSelectElement = exports.isLabelElement = exports.isFormElement = exports.isImgElement = exports.isAnchorElement = exports.isTextAreaElement = exports.isFileInput = exports.isButtonElement = exports.isInputElement = exports.isIframeElement = exports.isRenderedNode = exports.isTextNode = exports.isElementNode = exports.getSelectVisibleChildren = exports.getChildVisibleIndex = exports.getSelectParent = exports.isCrossDomainWindows = exports.getIframeByElement = exports.isElementInIframe = exports.isElementInDocument = exports.findDocument = exports.getActiveElement = void 0;
const hammerhead_1 = __importDefault(require("../deps/hammerhead"));
const arrayUtils = __importStar(require("./array"));
const browserUtils = hammerhead_1.default.utils.browser;
const nativeMethods = hammerhead_1.default.nativeMethods;
// NOTE: We have to retrieve styleUtils.get from hammerhead
// to avoid circular dependencies between domUtils and styleUtils
const getElementStyleProperty = hammerhead_1.default.utils.style.get;
exports.getActiveElement = hammerhead_1.default.utils.dom.getActiveElement;
exports.findDocument = hammerhead_1.default.utils.dom.findDocument;
exports.isElementInDocument = hammerhead_1.default.utils.dom.isElementInDocument;
exports.isElementInIframe = hammerhead_1.default.utils.dom.isElementInIframe;
exports.getIframeByElement = hammerhead_1.default.utils.dom.getIframeByElement;
exports.isCrossDomainWindows = hammerhead_1.default.utils.dom.isCrossDomainWindows;
exports.getSelectParent = hammerhead_1.default.utils.dom.getSelectParent;
exports.getChildVisibleIndex = hammerhead_1.default.utils.dom.getChildVisibleIndex;
exports.getSelectVisibleChildren = hammerhead_1.default.utils.dom.getSelectVisibleChildren;
exports.isElementNode = hammerhead_1.default.utils.dom.isElementNode;
exports.isTextNode = hammerhead_1.default.utils.dom.isTextNode;
exports.isRenderedNode = hammerhead_1.default.utils.dom.isRenderedNode;
exports.isIframeElement = hammerhead_1.default.utils.dom.isIframeElement;
exports.isInputElement = hammerhead_1.default.utils.dom.isInputElement;
exports.isButtonElement = hammerhead_1.default.utils.dom.isButtonElement;
exports.isFileInput = hammerhead_1.default.utils.dom.isFileInput;
exports.isTextAreaElement = hammerhead_1.default.utils.dom.isTextAreaElement;
exports.isAnchorElement = hammerhead_1.default.utils.dom.isAnchorElement;
exports.isImgElement = hammerhead_1.default.utils.dom.isImgElement;
exports.isFormElement = hammerhead_1.default.utils.dom.isFormElement;
exports.isLabelElement = hammerhead_1.default.utils.dom.isLabelElement;
exports.isSelectElement = hammerhead_1.default.utils.dom.isSelectElement;
exports.isRadioButtonElement = hammerhead_1.default.utils.dom.isRadioButtonElement;
exports.isColorInputElement = hammerhead_1.default.utils.dom.isColorInputElement;
exports.isCheckboxElement = hammerhead_1.default.utils.dom.isCheckboxElement;
exports.isOptionElement = hammerhead_1.default.utils.dom.isOptionElement;
exports.isSVGElement = hammerhead_1.default.utils.dom.isSVGElement;
exports.isMapElement = hammerhead_1.default.utils.dom.isMapElement;
exports.isBodyElement = hammerhead_1.default.utils.dom.isBodyElement;
exports.isHtmlElement = hammerhead_1.default.utils.dom.isHtmlElement;
exports.isDocument = hammerhead_1.default.utils.dom.isDocument;
exports.isWindow = hammerhead_1.default.utils.dom.isWindow;
exports.isTextEditableInput = hammerhead_1.default.utils.dom.isTextEditableInput;
exports.isTextEditableElement = hammerhead_1.default.utils.dom.isTextEditableElement;
exports.isTextEditableElementAndEditingAllowed = hammerhead_1.default.utils.dom.isTextEditableElementAndEditingAllowed;
exports.isContentEditableElement = hammerhead_1.default.utils.dom.isContentEditableElement;
exports.isDomElement = hammerhead_1.default.utils.dom.isDomElement;
exports.isShadowUIElement = hammerhead_1.default.utils.dom.isShadowUIElement;
exports.isShadowRoot = hammerhead_1.default.utils.dom.isShadowRoot;
exports.isElementFocusable = hammerhead_1.default.utils.dom.isElementFocusable;
exports.isHammerheadAttr = hammerhead_1.default.utils.dom.isHammerheadAttr;
exports.isElementReadOnly = hammerhead_1.default.utils.dom.isElementReadOnly;
exports.getScrollbarSize = hammerhead_1.default.utils.dom.getScrollbarSize;
exports.getMapContainer = hammerhead_1.default.utils.dom.getMapContainer;
exports.getTagName = hammerhead_1.default.utils.dom.getTagName;
exports.closest = hammerhead_1.default.utils.dom.closest;
exports.getParents = hammerhead_1.default.utils.dom.getParents;
exports.findParent = hammerhead_1.default.utils.dom.findParent;
exports.getTopSameDomainWindow = hammerhead_1.default.utils.dom.getTopSameDomainWindow;
exports.getParentExceptShadowRoot = hammerhead_1.default.utils.dom.getParentExceptShadowRoot;
function canFocus(element, parent, tabIndex) {
    let activeElement = null;
    if (parent.nodeType === Node.DOCUMENT_NODE)
        activeElement = nativeMethods.documentActiveElementGetter.call(parent);
    if (element === activeElement)
        return true;
    if (element.disabled)
        return false;
    if (getElementStyleProperty(element, 'display') === 'none' || getElementStyleProperty(element, 'visibility') === 'hidden')
        return false;
    if ((browserUtils.isIE || browserUtils.isAndroid) && exports.isOptionElement(element))
        return false;
    if (tabIndex !== null && tabIndex < 0)
        return false;
    return true;
}
function wrapElement(el) {
    return {
        el: el,
        skip: el.shadowRoot && el.tabIndex < 0,
        children: {},
    };
}
function buildFocusableTree(parent, sort) {
    const node = wrapElement(parent);
    parent = parent.shadowRoot || parent;
    if (exports.isIframeElement(parent))
        parent = nativeMethods.contentDocumentGetter.call(parent);
    if (parent && (parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE || parent.nodeType === Node.DOCUMENT_NODE)) {
        const elements = filterFocusableElements(parent);
        for (const el of elements) {
            const key = !sort || el.tabIndex <= 0 ? -1 : el.tabIndex;
            node.children[key] = node.children[key] || [];
            node.children[key].push(buildFocusableTree(el, sort));
        }
    }
    return node;
}
function filterFocusableElements(parent) {
    // NOTE: We don't take into account the case of embedded contentEditable
    // elements and specify the contentEditable attribute for focusable elements
    const allElements = parent.querySelectorAll('*');
    const invisibleElements = getInvisibleElements(allElements);
    const inputElementsRegExp = /^(input|button|select|textarea)$/;
    const focusableElements = [];
    let element = null;
    let tagName = null;
    let tabIndex = null;
    let needPush = false;
    for (let i = 0; i < allElements.length; i++) {
        element = allElements[i];
        tagName = exports.getTagName(element);
        tabIndex = getTabIndexAttributeIntValue(element);
        needPush = false;
        if (!canFocus(element, parent, tabIndex))
            continue;
        if (inputElementsRegExp.test(tagName))
            needPush = true;
        else if (element.shadowRoot)
            needPush = true;
        else if (exports.isIframeElement(element))
            needPush = true;
        else if (exports.isAnchorElement(element) && element.hasAttribute('href'))
            needPush = element.getAttribute('href') !== '' || !browserUtils.isIE || tabIndex !== null;
        const contentEditableAttr = element.getAttribute('contenteditable');
        if (contentEditableAttr === '' || contentEditableAttr === 'true')
            needPush = true;
        if (tabIndex !== null)
            needPush = true;
        if (needPush)
            focusableElements.push(element);
    }
    //NOTE: remove children of invisible elements
    return arrayUtils.filter(focusableElements, el => !containsElement(invisibleElements, el));
}
function flattenFocusableTree(node) {
    const result = [];
    if (!node.skip && node.el.nodeType !== Node.DOCUMENT_NODE && !exports.isIframeElement(node.el))
        result.push(node.el);
    for (const prop in node.children) {
        for (const childNode of node.children[prop])
            result.push(...flattenFocusableTree(childNode));
    }
    return result;
}
function getFocusableElements(doc, sort = false) {
    const root = buildFocusableTree(doc, sort);
    return flattenFocusableTree(root);
}
exports.getFocusableElements = getFocusableElements;
function getInvisibleElements(elements) {
    const invisibleElements = [];
    for (let i = 0; i < elements.length; i++) {
        if (getElementStyleProperty(elements[i], 'display') === 'none')
            invisibleElements.push(elements[i]);
    }
    return invisibleElements;
}
function getTabIndexAttributeIntValue(el) {
    let tabIndex = nativeMethods.getAttribute.call(el, 'tabindex');
    if (tabIndex !== null) {
        tabIndex = parseInt(tabIndex, 10);
        tabIndex = isNaN(tabIndex) ? null : tabIndex;
    }
    return tabIndex;
}
exports.getTabIndexAttributeIntValue = getTabIndexAttributeIntValue;
function containsElement(elements, element) {
    if (elements.contains)
        return elements.contains(element);
    return arrayUtils.some(elements, parent => parent.contains(element));
}
exports.containsElement = containsElement;
function getTextareaIndentInLine(textarea, position) {
    const textareaValue = getTextAreaValue(textarea);
    if (!textareaValue)
        return 0;
    const topPart = textareaValue.substring(0, position);
    const linePosition = topPart.lastIndexOf('\n') === -1 ? 0 : topPart.lastIndexOf('\n') + 1;
    return position - linePosition;
}
exports.getTextareaIndentInLine = getTextareaIndentInLine;
function getTextareaLineNumberByPosition(textarea, position) {
    const textareaValue = getTextAreaValue(textarea);
    const lines = textareaValue.split('\n');
    let topPartLength = 0;
    let line = 0;
    for (let i = 0; topPartLength <= position; i++) {
        if (position <= topPartLength + lines[i].length) {
            line = i;
            break;
        }
        topPartLength += lines[i].length + 1;
    }
    return line;
}
exports.getTextareaLineNumberByPosition = getTextareaLineNumberByPosition;
function getTextareaPositionByLineAndOffset(textarea, line, offset) {
    const textareaValue = getTextAreaValue(textarea);
    const lines = textareaValue.split('\n');
    let lineIndex = 0;
    for (let i = 0; i < line; i++)
        lineIndex += lines[i].length + 1;
    return lineIndex + offset;
}
exports.getTextareaPositionByLineAndOffset = getTextareaPositionByLineAndOffset;
// NOTE: the form is also submitted on enter key press if there is only one input of certain
// types (referred to as types that block implicit submission in the HTML5 standard) on the
// form and this input is focused (http://www.w3.org/TR/html5/forms.html#implicit-submission)
function blocksImplicitSubmission(el) {
    let inputTypeRegExp = null;
    if (browserUtils.isSafari)
        inputTypeRegExp = /^(text|password|color|date|time|datetime|datetime-local|email|month|number|search|tel|url|week|image)$/i;
    else if (browserUtils.isFirefox)
        inputTypeRegExp = /^(text|password|date|time|datetime|datetime-local|email|month|number|search|tel|url|week|image)$/i;
    else if (browserUtils.isIE)
        inputTypeRegExp = /^(text|password|color|date|time|datetime|datetime-local|email|file|month|number|search|tel|url|week|image)$/i;
    else
        inputTypeRegExp = /^(text|password|datetime|email|number|search|tel|url|image)$/i;
    return inputTypeRegExp.test(el.type);
}
exports.blocksImplicitSubmission = blocksImplicitSubmission;
function isEditableElement(el, checkEditingAllowed) {
    return checkEditingAllowed ?
        exports.isTextEditableElementAndEditingAllowed(el) || exports.isContentEditableElement(el) :
        exports.isTextEditableElement(el) || exports.isContentEditableElement(el);
}
exports.isEditableElement = isEditableElement;
function isElementContainsNode(parentElement, childNode) {
    if (isTheSameNode(childNode, parentElement))
        return true;
    const childNodes = nativeMethods.nodeChildNodesGetter.call(parentElement);
    const length = getChildNodesLength(childNodes);
    for (let i = 0; i < length; i++) {
        const el = childNodes[i];
        if (!exports.isShadowUIElement(el) && isElementContainsNode(el, childNode))
            return true;
    }
    return false;
}
exports.isElementContainsNode = isElementContainsNode;
function isOptionGroupElement(element) {
    return hammerhead_1.default.utils.dom.instanceToString(element) === '[object HTMLOptGroupElement]';
}
exports.isOptionGroupElement = isOptionGroupElement;
function getElementIndexInParent(parent, child) {
    const children = parent.querySelectorAll(exports.getTagName(child));
    return arrayUtils.indexOf(children, child);
}
exports.getElementIndexInParent = getElementIndexInParent;
function isTheSameNode(node1, node2) {
    //NOTE: Mozilla has not isSameNode method
    if (node1 && node2 && node1.isSameNode)
        return node1.isSameNode(node2);
    return node1 === node2;
}
exports.isTheSameNode = isTheSameNode;
function getElementDescription(el) {
    const attributes = {
        id: 'id',
        name: 'name',
        'class': 'className',
    };
    const res = [];
    res.push('<');
    res.push(exports.getTagName(el));
    for (const attr in attributes) {
        if (attributes.hasOwnProperty(attr)) {
            const val = el[attributes[attr]];
            if (val)
                res.push(' ' + attr + '="' + val + '"');
        }
    }
    res.push('>');
    return res.join('');
}
exports.getElementDescription = getElementDescription;
function getFocusableParent(el) {
    const parents = exports.getParents(el);
    for (let i = 0; i < parents.length; i++) {
        if (exports.isElementFocusable(parents[i]))
            return parents[i];
    }
    return null;
}
exports.getFocusableParent = getFocusableParent;
function remove(el) {
    if (el && el.parentElement)
        el.parentElement.removeChild(el);
}
exports.remove = remove;
function isIFrameWindowInDOM(win) {
    //NOTE: In MS Edge, if an iframe is removed from DOM, the browser throws an exception when accessing window.top
    //and window.frameElement. Fortunately, setTimeout is set to undefined in this case.
    if (!win.setTimeout)
        return false;
    let frameElement = null;
    try {
        //NOTE: This may raise a cross-domain policy error in some browsers.
        frameElement = win.frameElement;
    }
    catch (e) {
        return !!win.top;
    }
    // NOTE: in Firefox and WebKit, frameElement is null for cross-domain iframes even if they are in the DOM.
    // But these browsers don't execute scripts in removed iframes, so we suppose that the iframe is in the DOM.
    if ((browserUtils.isFirefox || browserUtils.isWebKit) && win.top !== win && !frameElement)
        return true;
    return !!(frameElement && nativeMethods.contentDocumentGetter.call(frameElement));
}
exports.isIFrameWindowInDOM = isIFrameWindowInDOM;
function isTopWindow(win) {
    try {
        //NOTE: MS Edge throws an exception when trying to access window.top from an iframe removed from DOM
        return win.top === win;
    }
    catch (e) {
        return false;
    }
}
exports.isTopWindow = isTopWindow;
function findIframeByWindow(iframeWindow, iframeDestinationWindow) {
    const iframes = (iframeDestinationWindow || window).document.getElementsByTagName('iframe');
    for (let i = 0; i < iframes.length; i++) {
        if (nativeMethods.contentWindowGetter.call(iframes[i]) === iframeWindow)
            return iframes[i];
    }
    return null;
}
exports.findIframeByWindow = findIframeByWindow;
function isEditableFormElement(element) {
    return exports.isTextEditableElement(element) || exports.isSelectElement(element);
}
exports.isEditableFormElement = isEditableFormElement;
function getCommonAncestor(element1, element2) {
    if (isTheSameNode(element1, element2))
        return element1;
    const el1Parents = [element1].concat(exports.getParents(element1));
    let commonAncestor = element2;
    while (commonAncestor) {
        if (arrayUtils.indexOf(el1Parents, commonAncestor) > -1)
            return commonAncestor;
        commonAncestor = nativeMethods.nodeParentNodeGetter.call(commonAncestor);
    }
    return commonAncestor;
}
exports.getCommonAncestor = getCommonAncestor;
function getChildrenLength(children) {
    return nativeMethods.htmlCollectionLengthGetter.call(children);
}
exports.getChildrenLength = getChildrenLength;
function getChildNodesLength(childNodes) {
    return nativeMethods.nodeListLengthGetter.call(childNodes);
}
exports.getChildNodesLength = getChildNodesLength;
function getInputValue(input) {
    return nativeMethods.inputValueGetter.call(input);
}
exports.getInputValue = getInputValue;
function getTextAreaValue(textArea) {
    return nativeMethods.textAreaValueGetter.call(textArea);
}
exports.getTextAreaValue = getTextAreaValue;
function setInputValue(input, value) {
    return nativeMethods.inputValueSetter.call(input, value);
}
exports.setInputValue = setInputValue;
function setTextAreaValue(textArea, value) {
    return nativeMethods.textAreaValueSetter.call(textArea, value);
}
exports.setTextAreaValue = setTextAreaValue;
function getElementValue(element) {
    if (exports.isInputElement(element))
        return getInputValue(element);
    else if (exports.isTextAreaElement(element))
        return getTextAreaValue(element);
    /*eslint-disable no-restricted-properties*/
    return element.value;
    /*eslint-enable no-restricted-properties*/
}
exports.getElementValue = getElementValue;
function setElementValue(element, value) {
    if (exports.isInputElement(element))
        return setInputValue(element, value);
    else if (exports.isTextAreaElement(element))
        return setTextAreaValue(element, value);
    /*eslint-disable no-restricted-properties*/
    element.value = value;
    /*eslint-enable no-restricted-properties*/
    return value;
}
exports.setElementValue = setElementValue;
function isShadowElement(element) {
    return element && element.getRootNode && exports.findDocument(element) !== element.getRootNode();
}
exports.isShadowElement = isShadowElement;
function contains(element, target) {
    if (!element || !target)
        return false;
    if (element.contains)
        return element.contains(target);
    return !!exports.findParent(target, true, node => node === element);
}
exports.contains = contains;
function isNodeEqual(el1, el2) {
    return el1 === el2;
}
exports.isNodeEqual = isNodeEqual;
function getNodeText(el) {
    return nativeMethods.nodeTextContentGetter.call(el);
}
exports.getNodeText = getNodeText;
function getImgMapName(img) {
    return img.useMap.substring(1);
}
exports.getImgMapName = getImgMapName;
function getDocumentElement(win) {
    return win.document.documentElement;
}
exports.getDocumentElement = getDocumentElement;
function isDocumentElement(el) {
    return el === document.documentElement;
}
exports.isDocumentElement = isDocumentElement;
function isIframeWindow() {
    return false;
}
exports.isIframeWindow = isIframeWindow;
//# sourceMappingURL=data:application/json;base64,