"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const hammerhead_1 = require("../../client/driver/deps/hammerhead");
class EventEmitter {
    constructor() {
        this._eventsListeners = {};
    }
    on(evt, listener) {
        if (!this._eventsListeners[evt])
            this._eventsListeners[evt] = [];
        this._eventsListeners[evt].push(listener);
    }
    once(evt, listener) {
        this.on(evt, (...args) => {
            this.off(evt, listener);
            return listener(...args);
        });
    }
    off(evt, listener) {
        const listeners = this._eventsListeners[evt];
        if (listeners)
            this._eventsListeners[evt] = hammerhead_1.nativeMethods.arrayFilter.call(listeners, (item) => item !== listener);
    }
    offAll(evt) {
        if (evt)
            this._eventsListeners[evt] = [];
        else
            this._eventsListeners = {};
    }
    emit(evt, ...args) {
        const listeners = this._eventsListeners[evt];
        if (!listeners)
            return;
        for (let i = 0; i < listeners.length; i++) {
            try {
                listeners[i].apply(this, args);
            }
            catch (e) {
                // Hack for IE: after document.write calling IFrameSandbox event handlers
                // rises 'Can't execute code from a freed script' exception because document has been
                // recreated
                if (e.message && e.message.indexOf('freed script') > -1)
                    this.off(evt, listeners[i]);
                else
                    throw e;
            }
        }
    }
}
exports.default = EventEmitter;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZW1pdHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFyZWQvdXRpbHMvZXZlbnQtZW1pdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGFBQWE7QUFDYixvRUFBb0U7QUFLcEUsTUFBcUIsWUFBWTtJQUc3QjtRQUNJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVNLEVBQUUsQ0FBRSxHQUFXLEVBQUUsUUFBa0I7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxJQUFJLENBQUUsR0FBVyxFQUFFLFFBQWtCO1FBQ3hDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUV4QixPQUFPLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEdBQUcsQ0FBRSxHQUFXLEVBQUUsUUFBa0I7UUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLElBQUksU0FBUztZQUNULElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRywwQkFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVNLE1BQU0sQ0FBRSxHQUFZO1FBQ3ZCLElBQUksR0FBRztZQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7O1lBRWhDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVNLElBQUksQ0FBRSxHQUFXLEVBQUUsR0FBRyxJQUFTO1FBQ2xDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsU0FBUztZQUNWLE9BQU87UUFFWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN2QyxJQUFJO2dCQUNBLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsT0FBTyxDQUFDLEVBQUU7Z0JBQ04seUVBQXlFO2dCQUN6RSxxRkFBcUY7Z0JBQ3JGLFlBQVk7Z0JBQ1osSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O29CQUU1QixNQUFNLENBQUMsQ0FBQzthQUNmO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7QUF6REQsK0JBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBuYXRpdmVNZXRob2RzIH0gZnJvbSAnLi4vLi4vY2xpZW50L2RyaXZlci9kZXBzL2hhbW1lcmhlYWQnO1xuXG5cbnR5cGUgTGlzdGVuZXIgPSAoLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50RW1pdHRlciB7XG4gICAgcHJpdmF0ZSBfZXZlbnRzTGlzdGVuZXJzOiBEaWN0aW9uYXJ5PExpc3RlbmVyW10+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzTGlzdGVuZXJzID0ge307XG4gICAgfVxuXG4gICAgcHVibGljIG9uIChldnQ6IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRzTGlzdGVuZXJzW2V2dF0pXG4gICAgICAgICAgICB0aGlzLl9ldmVudHNMaXN0ZW5lcnNbZXZ0XSA9IFtdO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50c0xpc3RlbmVyc1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbmNlIChldnQ6IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMub24oZXZ0LCAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhpcy5vZmYoZXZ0LCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lciguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9mZiAoZXZ0OiBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNMaXN0ZW5lcnNbZXZ0XTtcblxuICAgICAgICBpZiAobGlzdGVuZXJzKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzTGlzdGVuZXJzW2V2dF0gPSBuYXRpdmVNZXRob2RzLmFycmF5RmlsdGVyLmNhbGwobGlzdGVuZXJzLCAoaXRlbTogTGlzdGVuZXIpID0+IGl0ZW0gIT09IGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2ZmQWxsIChldnQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2dClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c0xpc3RlbmVyc1tldnRdID0gW107XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIH1cblxuICAgIHB1YmxpYyBlbWl0IChldnQ6IHN0cmluZywgLi4uYXJnczogYW55KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c0xpc3RlbmVyc1tldnRdO1xuXG4gICAgICAgIGlmICghbGlzdGVuZXJzKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFjayBmb3IgSUU6IGFmdGVyIGRvY3VtZW50LndyaXRlIGNhbGxpbmcgSUZyYW1lU2FuZGJveCBldmVudCBoYW5kbGVyc1xuICAgICAgICAgICAgICAgIC8vIHJpc2VzICdDYW4ndCBleGVjdXRlIGNvZGUgZnJvbSBhIGZyZWVkIHNjcmlwdCcgZXhjZXB0aW9uIGJlY2F1c2UgZG9jdW1lbnQgaGFzIGJlZW5cbiAgICAgICAgICAgICAgICAvLyByZWNyZWF0ZWRcbiAgICAgICAgICAgICAgICBpZiAoZS5tZXNzYWdlICYmIGUubWVzc2FnZS5pbmRleE9mKCdmcmVlZCBzY3JpcHQnKSA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZihldnQsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19