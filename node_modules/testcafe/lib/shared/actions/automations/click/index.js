"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../../../adapter");
const visible_element_automation_1 = __importDefault(require("../visible-element-automation"));
const delay_1 = __importDefault(require("../../../utils/delay"));
// @ts-ignore
const hammerhead_1 = require("../../../../client/automation/deps/hammerhead");
class ClickAutomation extends visible_element_automation_1.default {
    constructor(element, clickOptions, win, cursor) {
        super(element, clickOptions, win, cursor);
        this.modifiers = clickOptions.modifiers;
        this.strategy = adapter_1.adapter.automations.click.createMouseClickStrategy(this.element, clickOptions.caretPos);
    }
    _mousedown(eventArgs) {
        return this.strategy.mousedown(eventArgs);
    }
    _mouseup(element, eventArgs) {
        return this.strategy.mouseup(element, eventArgs);
    }
    run(useStrictElementCheck) {
        let eventArgs;
        return this
            ._ensureElement(useStrictElementCheck)
            .then(({ element, clientPoint, screenPoint, devicePoint }) => {
            eventArgs = {
                point: clientPoint,
                screenPoint: screenPoint,
                element: element,
                options: hammerhead_1.utils.extend({
                    clientX: clientPoint === null || clientPoint === void 0 ? void 0 : clientPoint.x,
                    clientY: clientPoint === null || clientPoint === void 0 ? void 0 : clientPoint.y,
                    screenX: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.x,
                    screenY: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.y,
                }, this.modifiers),
            };
            // NOTE: we should raise mouseup event with 'mouseActionStepDelay' after we trigger
            // mousedown event regardless of how long mousedown event handlers were executing
            return Promise.all([delay_1.default(this.automationSettings.mouseActionStepDelay), this.cursor
                    .leftButtonDown()
                    .then(() => this._mousedown(eventArgs)),
            ]);
        })
            .then(() => this.cursor.buttonUp())
            .then(() => this._getElementForEvent(eventArgs))
            .then(element => {
            return element ? this._mouseup(element, eventArgs) : null;
        });
    }
}
exports.default = ClickAutomation;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2hhcmVkL2FjdGlvbnMvYXV0b21hdGlvbnMvY2xpY2svaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBMkM7QUFFM0MsK0ZBQXlGO0FBSXpGLGlFQUF5QztBQUV6QyxhQUFhO0FBQ2IsOEVBQXNFO0FBV3RFLE1BQXFCLGVBQTJDLFNBQVEsb0NBQThCO0lBSWxHLFlBQXVCLE9BQVUsRUFBRSxZQUEwQixFQUFFLEdBQU0sRUFBRSxNQUFpQjtRQUNwRixLQUFLLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFTyxVQUFVLENBQUUsU0FBNEI7UUFDNUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8sUUFBUSxDQUFFLE9BQVUsRUFBRSxTQUE0QjtRQUN0RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU8sR0FBRyxDQUFFLHFCQUE4QjtRQUN2QyxJQUFJLFNBQTRCLENBQUM7UUFFakMsT0FBTyxJQUFJO2FBQ04sY0FBYyxDQUFDLHFCQUFxQixDQUFDO2FBQ3JDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtZQUN6RCxTQUFTLEdBQUc7Z0JBQ1IsS0FBSyxFQUFRLFdBQVc7Z0JBQ3hCLFdBQVcsRUFBRSxXQUFXO2dCQUN4QixPQUFPLEVBQU0sT0FBTztnQkFDcEIsT0FBTyxFQUFNLGtCQUFLLENBQUMsTUFBTSxDQUFDO29CQUN0QixPQUFPLEVBQUUsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLENBQUM7b0JBQ3ZCLE9BQU8sRUFBRSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsQ0FBQztvQkFDdkIsT0FBTyxFQUFFLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxDQUFDO29CQUN2QixPQUFPLEVBQUUsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLENBQUM7aUJBQzFCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNXLENBQUM7WUFHbEMsbUZBQW1GO1lBQ25GLGlGQUFpRjtZQUNqRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxlQUFLLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU07cUJBQy9FLGNBQWMsRUFBRTtxQkFDaEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDMUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDbEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7Q0FDSjtBQW5ERCxrQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vYWRhcHRlcic7XG5cbmltcG9ydCBWaXNpYmxlRWxlbWVudEF1dG9tYXRpb24sIHsgTW91c2VFdmVudEFyZ3MgfSBmcm9tICcuLi92aXNpYmxlLWVsZW1lbnQtYXV0b21hdGlvbic7XG5pbXBvcnQgeyBTaGFyZWRXaW5kb3cgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5pbXBvcnQgQ3Vyc29yIGZyb20gJy4uLy4uL2N1cnNvcic7XG5pbXBvcnQgeyBDbGlja09wdGlvbnMsIE1vZGlmaWVycyB9IGZyb20gJy4uLy4uLy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL29wdGlvbnMnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RlbGF5JztcbmltcG9ydCB7IE1vdXNlQ2xpY2tTdHJhdGVneUJhc2UgfSBmcm9tICcuL21vdXNlLWNsaWNrLXN0cmF0ZWd5LWJhc2UnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi9jbGllbnQvYXV0b21hdGlvbi9kZXBzL2hhbW1lcmhlYWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vdXNlQ2xpY2tFdmVudFN0YXRlPEU+IHtcbiAgICBtb3VzZWRvd25QcmV2ZW50ZWQ6IGJvb2xlYW47XG4gICAgYmx1clJhaXNlZDogYm9vbGVhbjtcbiAgICBzaW11bGF0ZURlZmF1bHRCZWhhdmlvcjogYm9vbGVhbjtcbiAgICBjbGlja0VsZW1lbnQ6IEUgfCBudWxsO1xuICAgIHRvdWNoU3RhcnRDYW5jZWxsZWQ6IGJvb2xlYW47XG4gICAgdG91Y2hFbmRDYW5jZWxsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWNrQXV0b21hdGlvbjxFLCBXIGV4dGVuZHMgU2hhcmVkV2luZG93PiBleHRlbmRzIFZpc2libGVFbGVtZW50QXV0b21hdGlvbjxFLCBXPiB7XG4gICAgcHJpdmF0ZSBtb2RpZmllcnM6IE1vZGlmaWVycztcbiAgICBwdWJsaWMgc3RyYXRlZ3k6IE1vdXNlQ2xpY2tTdHJhdGVneUJhc2U8RT47XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IgKGVsZW1lbnQ6IEUsIGNsaWNrT3B0aW9uczogQ2xpY2tPcHRpb25zLCB3aW46IFcsIGN1cnNvcjogQ3Vyc29yPFc+KSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIGNsaWNrT3B0aW9ucywgd2luLCBjdXJzb3IpO1xuXG4gICAgICAgIHRoaXMubW9kaWZpZXJzID0gY2xpY2tPcHRpb25zLm1vZGlmaWVycztcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IGFkYXB0ZXIuYXV0b21hdGlvbnMuY2xpY2suY3JlYXRlTW91c2VDbGlja1N0cmF0ZWd5KHRoaXMuZWxlbWVudCwgY2xpY2tPcHRpb25zLmNhcmV0UG9zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9tb3VzZWRvd24gKGV2ZW50QXJnczogTW91c2VFdmVudEFyZ3M8RT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyYXRlZ3kubW91c2Vkb3duKGV2ZW50QXJncyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbW91c2V1cCAoZWxlbWVudDogRSwgZXZlbnRBcmdzOiBNb3VzZUV2ZW50QXJnczxFPik6IFByb21pc2U8TW91c2VFdmVudEFyZ3M8RT4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyYXRlZ3kubW91c2V1cChlbGVtZW50LCBldmVudEFyZ3MpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcnVuICh1c2VTdHJpY3RFbGVtZW50Q2hlY2s6IGJvb2xlYW4pOiBQcm9taXNlPE1vdXNlRXZlbnRBcmdzPEU+IHwgbnVsbD4ge1xuICAgICAgICBsZXQgZXZlbnRBcmdzOiBNb3VzZUV2ZW50QXJnczxFPjtcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgLl9lbnN1cmVFbGVtZW50KHVzZVN0cmljdEVsZW1lbnRDaGVjaylcbiAgICAgICAgICAgIC50aGVuKCh7IGVsZW1lbnQsIGNsaWVudFBvaW50LCBzY3JlZW5Qb2ludCwgZGV2aWNlUG9pbnQgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50QXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6ICAgICAgIGNsaWVudFBvaW50LFxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5Qb2ludDogc2NyZWVuUG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6ICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiAgICAgdXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFg6IGNsaWVudFBvaW50Py54LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50WTogY2xpZW50UG9pbnQ/LnksXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5YOiBkZXZpY2VQb2ludD8ueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblk6IGRldmljZVBvaW50Py55LFxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLm1vZGlmaWVycyksXG4gICAgICAgICAgICAgICAgfSBhcyB1bmtub3duIGFzIE1vdXNlRXZlbnRBcmdzPEU+O1xuXG5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBzaG91bGQgcmFpc2UgbW91c2V1cCBldmVudCB3aXRoICdtb3VzZUFjdGlvblN0ZXBEZWxheScgYWZ0ZXIgd2UgdHJpZ2dlclxuICAgICAgICAgICAgICAgIC8vIG1vdXNlZG93biBldmVudCByZWdhcmRsZXNzIG9mIGhvdyBsb25nIG1vdXNlZG93biBldmVudCBoYW5kbGVycyB3ZXJlIGV4ZWN1dGluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbZGVsYXkodGhpcy5hdXRvbWF0aW9uU2V0dGluZ3MubW91c2VBY3Rpb25TdGVwRGVsYXkpLCB0aGlzLmN1cnNvclxuICAgICAgICAgICAgICAgICAgICAubGVmdEJ1dHRvbkRvd24oKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLl9tb3VzZWRvd24oZXZlbnRBcmdzKSksXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jdXJzb3IuYnV0dG9uVXAoKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuX2dldEVsZW1lbnRGb3JFdmVudChldmVudEFyZ3MpKVxuICAgICAgICAgICAgLnRoZW4oZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgPyB0aGlzLl9tb3VzZXVwKGVsZW1lbnQsIGV2ZW50QXJncykgOiBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19