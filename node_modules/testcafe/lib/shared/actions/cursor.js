"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axis_values_1 = __importDefault(require("../utils/values/axis-values"));
// @ts-ignore
const hammerhead_1 = require("../../client/driver/deps/hammerhead");
class Cursor {
    constructor(activeWin, ui) {
        this._ui = ui;
        // NOTE: the default position should be outside of the page (GH-794)
        this._x = -1;
        this._y = -1;
        this._activeWindow = activeWin;
    }
    _ensureActiveWindow(win) {
        if (this._activeWindow === win || this._activeWindow === win.parent)
            return;
        if (this._activeWindow.parent !== win)
            this._activeWindow = win;
    }
    isActive(currWin) {
        this._ensureActiveWindow(currWin);
        return this._activeWindow === currWin;
    }
    setActiveWindow(win) {
        this._activeWindow = win;
    }
    getActiveWindow(currWin) {
        this._ensureActiveWindow(currWin);
        return this._activeWindow;
    }
    getPosition() {
        return new axis_values_1.default(this._x, this._y);
    }
    move(point) {
        this._x = point.x;
        this._y = point.y;
        return this._ui.move(point);
    }
    hide() {
        if (this._ui.hide)
            return this._ui.hide();
        return hammerhead_1.Promise.resolve();
    }
    show() {
        if (this._ui.show)
            return this._ui.show();
        return hammerhead_1.Promise.resolve();
    }
    leftButtonDown() {
        return this._ui.leftButtonDown();
    }
    rightButtonDown() {
        return this._ui.rightButtonDown();
    }
    buttonUp() {
        return this._ui.buttonUp();
    }
}
exports.default = Cursor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NoYXJlZC9hY3Rpb25zL2N1cnNvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDhFQUF5RTtBQUV6RSxhQUFhO0FBQ2Isb0VBQThEO0FBRTlELE1BQXFCLE1BQU07SUFNdkIsWUFBb0IsU0FBWSxFQUFFLEVBQVk7UUFDMUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZCxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFYixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sbUJBQW1CLENBQUUsR0FBTTtRQUMvQixJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFDLE1BQU07WUFDL0QsT0FBTztRQUVYLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssR0FBRztZQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQztJQUNqQyxDQUFDO0lBRU0sUUFBUSxDQUFFLE9BQVU7UUFDdkIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLGFBQWEsS0FBSyxPQUFPLENBQUM7SUFDMUMsQ0FBQztJQUVNLGVBQWUsQ0FBRSxHQUFNO1FBQzFCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO0lBQzdCLENBQUM7SUFFTSxlQUFlLENBQUUsT0FBVTtRQUM5QixJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFTSxXQUFXO1FBQ2QsT0FBTyxJQUFJLHFCQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLElBQUksQ0FBRSxLQUE2QjtRQUN0QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUzQixPQUFPLG9CQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUzQixPQUFPLG9CQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU0sUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0NBQ0o7QUE1RUQseUJBNEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3Vyc29yVUkgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBBeGlzVmFsdWVzLCB7IEF4aXNWYWx1ZXNEYXRhIH0gZnJvbSAnLi4vdXRpbHMvdmFsdWVzL2F4aXMtdmFsdWVzJztcbmltcG9ydCB7IFNoYXJlZFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IFByb21pc2UgfSBmcm9tICcuLi8uLi9jbGllbnQvZHJpdmVyL2RlcHMvaGFtbWVyaGVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnNvcjxXIGV4dGVuZHMgU2hhcmVkV2luZG93PiB7XG4gICAgcHJpdmF0ZSBfYWN0aXZlV2luZG93OiBXO1xuICAgIHByaXZhdGUgX3g6IG51bWJlcjtcbiAgICBwcml2YXRlIF95OiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdWk6IEN1cnNvclVJO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChhY3RpdmVXaW46IFcsIHVpOiBDdXJzb3JVSSkge1xuICAgICAgICB0aGlzLl91aSA9IHVpO1xuXG4gICAgICAgIC8vIE5PVEU6IHRoZSBkZWZhdWx0IHBvc2l0aW9uIHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBwYWdlIChHSC03OTQpXG4gICAgICAgIHRoaXMuX3ggPSAtMTtcbiAgICAgICAgdGhpcy5feSA9IC0xO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVdpbmRvdyA9IGFjdGl2ZVdpbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbnN1cmVBY3RpdmVXaW5kb3cgKHdpbjogVyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlV2luZG93ID09PSB3aW4gfHwgdGhpcy5fYWN0aXZlV2luZG93ID09PSB3aW4ucGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVXaW5kb3cucGFyZW50ICE9PSB3aW4pXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVXaW5kb3cgPSB3aW47XG4gICAgfVxuXG4gICAgcHVibGljIGlzQWN0aXZlIChjdXJyV2luOiBXKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUFjdGl2ZVdpbmRvdyhjdXJyV2luKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlV2luZG93ID09PSBjdXJyV2luO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBY3RpdmVXaW5kb3cgKHdpbjogVyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hY3RpdmVXaW5kb3cgPSB3aW47XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFjdGl2ZVdpbmRvdyAoY3VycldpbjogVyk6IFcge1xuICAgICAgICB0aGlzLl9lbnN1cmVBY3RpdmVXaW5kb3coY3Vycldpbik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVdpbmRvdztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UG9zaXRpb24gKCk6IEF4aXNWYWx1ZXM8bnVtYmVyPiB7XG4gICAgICAgIHJldHVybiBuZXcgQXhpc1ZhbHVlcyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZSAocG9pbnQ6IEF4aXNWYWx1ZXNEYXRhPG51bWJlcj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5feCA9IHBvaW50Lng7XG4gICAgICAgIHRoaXMuX3kgPSBwb2ludC55O1xuXG4gICAgICAgIHJldHVybiB0aGlzLl91aS5tb3ZlKHBvaW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLl91aS5oaWRlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VpLmhpZGUoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3cgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5fdWkuc2hvdylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91aS5zaG93KCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsZWZ0QnV0dG9uRG93biAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aS5sZWZ0QnV0dG9uRG93bigpO1xuICAgIH1cblxuICAgIHB1YmxpYyByaWdodEJ1dHRvbkRvd24gKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdWkucmlnaHRCdXR0b25Eb3duKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGJ1dHRvblVwICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VpLmJ1dHRvblVwKCk7XG4gICAgfVxufVxuIl19