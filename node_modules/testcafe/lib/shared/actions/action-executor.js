"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const event_emitter_1 = __importDefault(require("../utils/event-emitter"));
const delay_1 = __importDefault(require("../utils/delay"));
const promise_1 = require("../utils/promise");
const automation_errors_1 = __importDefault(require("../errors/automation-errors"));
const errors_1 = require("../../shared/errors");
const elements_retriever_1 = __importDefault(require("../utils/elements-retriever"));
// @ts-ignore
const hammerhead_1 = require("../../client/driver/deps/hammerhead");
const MAX_DELAY_AFTER_EXECUTION = 2000;
const CHECK_ELEMENT_IN_AUTOMATIONS_INTERVAL = 250;
class ActionExecutor extends event_emitter_1.default {
    constructor(command, globalSelectorTimeout, testSpeed, executeSelectorFn) {
        var _a;
        super();
        this._command = command;
        this._targetElement = null;
        this._elements = [];
        this._globalSelectorTimeout = globalSelectorTimeout;
        this._executionStartTime = 0;
        this._executeSelectorFn = executeSelectorFn;
        // TODO: move it to the server
        // @ts-ignore
        if (command.options && !command.options.speed) // @ts-ignore
            command.options.speed = testSpeed;
        // TODO: and this
        // @ts-ignore
        this._commandSelectorTimeout = typeof ((_a = command.selector) === null || _a === void 0 ? void 0 : _a.timeout) === 'number' ? command.selector.timeout : globalSelectorTimeout;
    }
    _delayAfterExecution() {
        // @ts-ignore TODO
        if (!this._command.options || this._command.options.speed === 1)
            return hammerhead_1.Promise.resolve();
        // @ts-ignore TODO
        return delay_1.default((1 - this._command.options.speed) * MAX_DELAY_AFTER_EXECUTION);
    }
    _isExecutionTimeoutExpired() {
        return hammerhead_1.nativeMethods.dateNow() - this._executionStartTime >= this._commandSelectorTimeout;
    }
    _ensureCommandArguments() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!(handler === null || handler === void 0 ? void 0 : handler.ensureCmdArgs))
            return;
        handler.ensureCmdArgs(this._command);
    }
    _ensureCommandElements() {
        var _a;
        const elsRetriever = new elements_retriever_1.default(this._globalSelectorTimeout, this._executeSelectorFn);
        if (this._command.selector)
            // @ts-ignore TODO
            elsRetriever.push(this._command.selector);
        const additionalSelectorProps = (_a = ActionExecutor.ACTIONS_HANDLERS[this._command.type]) === null || _a === void 0 ? void 0 : _a.additionalSelectorProps;
        if (additionalSelectorProps) {
            for (const prop of additionalSelectorProps) {
                if (this._command[prop])
                    // @ts-ignore TODO
                    elsRetriever.push(this._command[prop], prop);
            }
        }
        return elsRetriever.getElements()
            .then((elements) => {
            this._elements = elements;
        });
    }
    _ensureCommandElementsProperties() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!(handler === null || handler === void 0 ? void 0 : handler.ensureElsProps))
            return;
        handler.ensureElsProps(this._elements);
    }
    async _ensureCommandOptions() {
        const opts = this._command.options;
        // @ts-ignore TODO
        if (this._elements.length && opts && 'offsetX' in opts && 'offsetY' in opts) { // @ts-ignore
            const { offsetX, offsetY } = await adapter_1.adapter.getOffsetOptions(this._elements[0], opts.offsetX, opts.offsetY);
            // @ts-ignore TODO
            opts.offsetX = offsetX;
            // @ts-ignore TODO
            opts.offsetY = offsetY;
        }
    }
    _createAutomation() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!handler)
            throw new Error(`There is no handler for the "${this._command.type}" command.`);
        return handler.create(this._command, this._elements);
    }
    _runAction(strictElementCheck) {
        return this._ensureCommandElements()
            .then(() => this._ensureCommandElementsProperties())
            .then(() => this._ensureCommandOptions())
            .then(() => {
            const automation = this._createAutomation();
            if (automation.TARGET_ELEMENT_FOUND_EVENT) {
                automation.on(automation.TARGET_ELEMENT_FOUND_EVENT, e => {
                    this._targetElement = e.element;
                    this.emit(ActionExecutor.EXECUTION_STARTED_EVENT);
                });
            }
            else
                this.emit(ActionExecutor.EXECUTION_STARTED_EVENT);
            return automation.run(strictElementCheck);
        });
    }
    _runRecursively() {
        let actionFinished = false;
        let strictElementCheck = true;
        return promise_1.whilst(() => !actionFinished, () => {
            return this._runAction(strictElementCheck)
                .then(() => {
                actionFinished = true;
            })
                .catch((err) => {
                if (!this._isExecutionTimeoutExpired())
                    return delay_1.default(CHECK_ELEMENT_IN_AUTOMATIONS_INTERVAL);
                if (err.message === automation_errors_1.default.foundElementIsNotTarget) {
                    // If we can't get a target element via elementFromPoint but it's
                    // visible we click on the point where the element is located.
                    strictElementCheck = false;
                    return hammerhead_1.Promise.resolve();
                }
                throw err.message === automation_errors_1.default.elementIsInvisibleError ?
                    new errors_1.ActionElementIsInvisibleError() : err;
            });
        });
    }
    execute(barriers) {
        this._executionStartTime = hammerhead_1.nativeMethods.dateNow();
        try {
            // TODO: I think that this check is unnecessary here. It checks only a key sequence of the pressKey command.
            // This check can be moved to the server.
            this._ensureCommandArguments();
        }
        catch (err) {
            return hammerhead_1.Promise.reject(err);
        }
        this.emit(ActionExecutor.WAITING_FOR_ELEMENT_EVENT, this._commandSelectorTimeout);
        return this._runRecursively()
            .then(() => hammerhead_1.Promise.all([
            this._delayAfterExecution(),
            barriers.wait(),
        ]))
            .then(() => {
            const elements = [...this._elements];
            if (this._targetElement)
                elements[0] = this._targetElement;
            return elements;
        });
    }
}
exports.default = ActionExecutor;
ActionExecutor.EXECUTION_STARTED_EVENT = 'execution-started';
ActionExecutor.WAITING_FOR_ELEMENT_EVENT = 'waiting-for-elements';
ActionExecutor.ACTIONS_HANDLERS = {};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWV4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NoYXJlZC9hY3Rpb25zL2FjdGlvbi1leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUFxQztBQUNyQywyRUFBa0Q7QUFFbEQsMkRBQW1DO0FBQ25DLDhDQUEwQztBQUcxQyxvRkFBaUU7QUFDakUsZ0RBQW9FO0FBRXBFLHFGQUE0RDtBQUU1RCxhQUFhO0FBQ2Isb0VBQTZFO0FBRTdFLE1BQU0seUJBQXlCLEdBQWUsSUFBSSxDQUFDO0FBQ25ELE1BQU0scUNBQXFDLEdBQUcsR0FBRyxDQUFDO0FBRWxELE1BQXFCLGNBQWtCLFNBQVEsdUJBQVk7SUFhdkQsWUFBb0IsT0FBMEIsRUFBRSxxQkFBNkIsRUFBRSxTQUFpQixFQUFFLGlCQUF1Qzs7UUFDckksS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsUUFBUSxHQUFTLE9BQU8sQ0FBQztRQUM5QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFRLEVBQUUsQ0FBQztRQUV6QixJQUFJLENBQUMsc0JBQXNCLEdBQUcscUJBQXFCLENBQUM7UUFDcEQsSUFBSSxDQUFDLG1CQUFtQixHQUFNLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQU8saUJBQWlCLENBQUM7UUFFaEQsOEJBQThCO1FBQzlCLGFBQWE7UUFDYixJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxhQUFhO1lBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUV0QyxpQkFBaUI7UUFDakIsYUFBYTtRQUNiLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxjQUFPLE9BQU8sQ0FBQyxRQUFRLDBDQUFFLE9BQU8sQ0FBQSxLQUFLLFFBQVEsQ0FBQyxDQUFD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QUFDO1FBRW5ELElBQUk7WUFDQSw0R0FBNEc7WUFDNUcseUNBQXlDO1lBQ3pDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxHQUFHLEVBQUU7WUFDUixPQUFPLG9CQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFbEYsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFO2FBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBTyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDM0IsUUFBUSxDQUFDLElBQUksRUFBRTtTQUNsQixDQUFDLENBQUM7YUFDRixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUVyQyxJQUFJLElBQUksQ0FBQyxjQUFjO2dCQUNuQixRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUV0QyxPQUFPLFFBQVEsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7O0FBMUxMLGlDQTJMQztBQTFMMEIsc0NBQXVCLEdBQUcsbUJBQW1CLENBQUM7QUFDOUMsd0NBQXlCLEdBQUcsc0JBQXNCLENBQUM7QUFDbkQsK0JBQWdCLEdBQWtDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVyJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgQ29tcGxleEJhcnJpZXIgZnJvbSAnLi4vLi4vY2xpZW50L2RyaXZlci9iYXJyaWVycy9jb21wbGV4LWJhcnJpZXInO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4uL3V0aWxzL2RlbGF5JztcbmltcG9ydCB7IHdoaWxzdCB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UnO1xuaW1wb3J0IHsgQWN0aW9uQ29tbWFuZEJhc2UgfSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9iYXNlJztcbmltcG9ydCB7IERpY3Rpb25hcnkgfSBmcm9tICcuLi8uLi9jb25maWd1cmF0aW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IEFVVE9NQVRJT05fRVJST1JfVFlQRVMgZnJvbSAnLi4vZXJyb3JzL2F1dG9tYXRpb24tZXJyb3JzJztcbmltcG9ydCB7IEFjdGlvbkVsZW1lbnRJc0ludmlzaWJsZUVycm9yIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2Vycm9ycyc7XG5pbXBvcnQgeyBFeGVjdXRlU2VsZWN0b3JGbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBFbGVtZW50c1JldHJpZXZlciBmcm9tICcuLi91dGlscy9lbGVtZW50cy1yZXRyaWV2ZXInO1xuaW1wb3J0IHsgQXV0b21hdGlvbiwgQXV0b21hdGlvbkhhbmRsZXIgfSBmcm9tICcuL3R5cGVzJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IG5hdGl2ZU1ldGhvZHMsIFByb21pc2UgfSBmcm9tICcuLi8uLi9jbGllbnQvZHJpdmVyL2RlcHMvaGFtbWVyaGVhZCc7XG5cbmNvbnN0IE1BWF9ERUxBWV9BRlRFUl9FWEVDVVRJT04gICAgICAgICAgICAgPSAyMDAwO1xuY29uc3QgQ0hFQ0tfRUxFTUVOVF9JTl9BVVRPTUFUSU9OU19JTlRFUlZBTCA9IDI1MDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uRXhlY3V0b3I8VD4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRVhFQ1VUSU9OX1NUQVJURURfRVZFTlQgPSAnZXhlY3V0aW9uLXN0YXJ0ZWQnO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV0FJVElOR19GT1JfRUxFTUVOVF9FVkVOVCA9ICd3YWl0aW5nLWZvci1lbGVtZW50cyc7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBBQ1RJT05TX0hBTkRMRVJTOiBEaWN0aW9uYXJ5PEF1dG9tYXRpb25IYW5kbGVyPiA9IHt9O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29tbWFuZDogQWN0aW9uQ29tbWFuZEJhc2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZ2xvYmFsU2VsZWN0b3JUaW1lb3V0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29tbWFuZFNlbGVjdG9yVGltZW91dDogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2V4ZWN1dGVTZWxlY3RvckZuOiBFeGVjdXRlU2VsZWN0b3JGbjxUPjtcbiAgICBwcml2YXRlIF9lbGVtZW50czogVFtdO1xuICAgIHByaXZhdGUgX2V4ZWN1dGlvblN0YXJ0VGltZTogbnVtYmVyO1xuICAgIHByaXZhdGUgX3RhcmdldEVsZW1lbnQ6IFQgfCBudWxsO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChjb21tYW5kOiBBY3Rpb25Db21tYW5kQmFzZSwgZ2xvYmFsU2VsZWN0b3JUaW1lb3V0OiBudW1iZXIsIHRlc3RTcGVlZDogbnVtYmVyLCBleGVjdXRlU2VsZWN0b3JGbjogRXhlY3V0ZVNlbGVjdG9yRm48VD4pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9jb21tYW5kICAgICAgID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0RWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzICAgICAgPSBbXTtcblxuICAgICAgICB0aGlzLl9nbG9iYWxTZWxlY3RvclRpbWVvdXQgPSBnbG9iYWxTZWxlY3RvclRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGlvblN0YXJ0VGltZSAgICA9IDA7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGVTZWxlY3RvckZuICAgICA9IGV4ZWN1dGVTZWxlY3RvckZuO1xuXG4gICAgICAgIC8vIFRPRE86IG1vdmUgaXQgdG8gdGhlIHNlcnZlclxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChjb21tYW5kLm9wdGlvbnMgJiYgIWNvbW1hbmQub3B0aW9ucy5zcGVlZCkgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29tbWFuZC5vcHRpb25zLnNwZWVkID0gdGVzdFNwZWVkO1xuXG4gICAgICAgIC8vIFRPRE86IGFuZCB0aGlzXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fY29tbWFuZFNlbGVjdG9yVGltZW91dCA9IHR5cGVvZiBjb21tYW5kLnNlbGVjdG9yPy50aW1lb3V0ID09PSAnbnVtYmVyJyA/IGNvbW1hbmQuc2VsZWN0b3IudGltZW91dCA6IGdsb2JhbFNlbGVjdG9yVGltZW91dDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9kZWxheUFmdGVyRXhlY3V0aW9uICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBUT0RPXG4gICAgICAgIGlmICghdGhpcy5fY29tbWFuZC5vcHRpb25zIHx8IHRoaXMuX2NvbW1hbmQub3B0aW9ucy5zcGVlZCA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE9cbiAgICAgICAgcmV0dXJuIGRlbGF5KCgxIC0gdGhpcy5fY29tbWFuZC5vcHRpb25zLnNwZWVkKSAqIE1BWF9ERUxBWV9BRlRFUl9FWEVDVVRJT04pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2lzRXhlY3V0aW9uVGltZW91dEV4cGlyZWQgKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kcy5kYXRlTm93KCkgLSB0aGlzLl9leGVjdXRpb25TdGFydFRpbWUgPj0gdGhpcy5fY29tbWFuZFNlbGVjdG9yVGltZW91dDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbnN1cmVDb21tYW5kQXJndW1lbnRzICgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IEFjdGlvbkV4ZWN1dG9yLkFDVElPTlNfSEFORExFUlNbdGhpcy5fY29tbWFuZC50eXBlXTtcblxuICAgICAgICBpZiAoIWhhbmRsZXI/LmVuc3VyZUNtZEFyZ3MpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaGFuZGxlci5lbnN1cmVDbWRBcmdzKHRoaXMuX2NvbW1hbmQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2Vuc3VyZUNvbW1hbmRFbGVtZW50cyAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGVsc1JldHJpZXZlciA9IG5ldyBFbGVtZW50c1JldHJpZXZlcih0aGlzLl9nbG9iYWxTZWxlY3RvclRpbWVvdXQsIHRoaXMuX2V4ZWN1dGVTZWxlY3RvckZuKTtcblxuICAgICAgICBpZiAodGhpcy5fY29tbWFuZC5zZWxlY3RvcilcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ET1xuICAgICAgICAgICAgZWxzUmV0cmlldmVyLnB1c2godGhpcy5fY29tbWFuZC5zZWxlY3Rvcik7XG5cbiAgICAgICAgY29uc3QgYWRkaXRpb25hbFNlbGVjdG9yUHJvcHMgPSBBY3Rpb25FeGVjdXRvci5BQ1RJT05TX0hBTkRMRVJTW3RoaXMuX2NvbW1hbmQudHlwZV0/LmFkZGl0aW9uYWxTZWxlY3RvclByb3BzO1xuXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU2VsZWN0b3JQcm9wcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIGFkZGl0aW9uYWxTZWxlY3RvclByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbW1hbmRbcHJvcF0pXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ET1xuICAgICAgICAgICAgICAgICAgICBlbHNSZXRyaWV2ZXIucHVzaCh0aGlzLl9jb21tYW5kW3Byb3BdLCBwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbHNSZXRyaWV2ZXIuZ2V0RWxlbWVudHMoKVxuICAgICAgICAgICAgLnRoZW4oKGVsZW1lbnRzOiBUW10pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZW5zdXJlQ29tbWFuZEVsZW1lbnRzUHJvcGVydGllcyAoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBBY3Rpb25FeGVjdXRvci5BQ1RJT05TX0hBTkRMRVJTW3RoaXMuX2NvbW1hbmQudHlwZV07XG5cbiAgICAgICAgaWYgKCFoYW5kbGVyPy5lbnN1cmVFbHNQcm9wcylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBoYW5kbGVyLmVuc3VyZUVsc1Byb3BzKHRoaXMuX2VsZW1lbnRzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9lbnN1cmVDb21tYW5kT3B0aW9ucyAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLl9jb21tYW5kLm9wdGlvbnM7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZSBUT0RPXG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50cy5sZW5ndGggJiYgb3B0cyAmJiAnb2Zmc2V0WCcgaW4gb3B0cyAmJiAnb2Zmc2V0WScgaW4gb3B0cykgeyAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IGF3YWl0IGFkYXB0ZXIuZ2V0T2Zmc2V0T3B0aW9ucyh0aGlzLl9lbGVtZW50c1swXSwgb3B0cy5vZmZzZXRYLCBvcHRzLm9mZnNldFkpO1xuXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE9cbiAgICAgICAgICAgIG9wdHMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE9cbiAgICAgICAgICAgIG9wdHMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVBdXRvbWF0aW9uICgpOiBBdXRvbWF0aW9uIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IEFjdGlvbkV4ZWN1dG9yLkFDVElPTlNfSEFORExFUlNbdGhpcy5fY29tbWFuZC50eXBlXTtcblxuICAgICAgICBpZiAoIWhhbmRsZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIGhhbmRsZXIgZm9yIHRoZSBcIiR7dGhpcy5fY29tbWFuZC50eXBlfVwiIGNvbW1hbmQuYCk7XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuY3JlYXRlKHRoaXMuX2NvbW1hbmQsIHRoaXMuX2VsZW1lbnRzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9ydW5BY3Rpb24gKHN0cmljdEVsZW1lbnRDaGVjazogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5zdXJlQ29tbWFuZEVsZW1lbnRzKClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuX2Vuc3VyZUNvbW1hbmRFbGVtZW50c1Byb3BlcnRpZXMoKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuX2Vuc3VyZUNvbW1hbmRPcHRpb25zKCkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0b21hdGlvbiA9IHRoaXMuX2NyZWF0ZUF1dG9tYXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGlmIChhdXRvbWF0aW9uLlRBUkdFVF9FTEVNRU5UX0ZPVU5EX0VWRU5UKSB7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9tYXRpb24ub24oYXV0b21hdGlvbi5UQVJHRVRfRUxFTUVOVF9GT1VORF9FVkVOVCwgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRFbGVtZW50ID0gZS5lbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQWN0aW9uRXhlY3V0b3IuRVhFQ1VUSU9OX1NUQVJURURfRVZFTlQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQWN0aW9uRXhlY3V0b3IuRVhFQ1VUSU9OX1NUQVJURURfRVZFTlQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1dG9tYXRpb24ucnVuKHN0cmljdEVsZW1lbnRDaGVjayk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9ydW5SZWN1cnNpdmVseSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxldCBhY3Rpb25GaW5pc2hlZCAgICAgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0cmljdEVsZW1lbnRDaGVjayA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHdoaWxzdCgoKSA9PiAhYWN0aW9uRmluaXNoZWQsICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydW5BY3Rpb24oc3RyaWN0RWxlbWVudENoZWNrKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzRXhlY3V0aW9uVGltZW91dEV4cGlyZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWxheShDSEVDS19FTEVNRU5UX0lOX0FVVE9NQVRJT05TX0lOVEVSVkFMKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09IEFVVE9NQVRJT05fRVJST1JfVFlQRVMuZm91bmRFbGVtZW50SXNOb3RUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IGdldCBhIHRhcmdldCBlbGVtZW50IHZpYSBlbGVtZW50RnJvbVBvaW50IGJ1dCBpdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2aXNpYmxlIHdlIGNsaWNrIG9uIHRoZSBwb2ludCB3aGVyZSB0aGUgZWxlbWVudCBpcyBsb2NhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0RWxlbWVudENoZWNrID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVyci5tZXNzYWdlID09PSBBVVRPTUFUSU9OX0VSUk9SX1RZUEVTLmVsZW1lbnRJc0ludmlzaWJsZUVycm9yID9cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBY3Rpb25FbGVtZW50SXNJbnZpc2libGVFcnJvcigpIDogZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXhlY3V0ZSAoYmFycmllcnM6IENvbXBsZXhCYXJyaWVyPGFueSwgYW55Pik6IFByb21pc2U8VFtdPiB7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGlvblN0YXJ0VGltZSA9IG5hdGl2ZU1ldGhvZHMuZGF0ZU5vdygpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBJIHRoaW5rIHRoYXQgdGhpcyBjaGVjayBpcyB1bm5lY2Vzc2FyeSBoZXJlLiBJdCBjaGVja3Mgb25seSBhIGtleSBzZXF1ZW5jZSBvZiB0aGUgcHJlc3NLZXkgY29tbWFuZC5cbiAgICAgICAgICAgIC8vIFRoaXMgY2hlY2sgY2FuIGJlIG1vdmVkIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVDb21tYW5kQXJndW1lbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoQWN0aW9uRXhlY3V0b3IuV0FJVElOR19GT1JfRUxFTUVOVF9FVkVOVCwgdGhpcy5fY29tbWFuZFNlbGVjdG9yVGltZW91dCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1blJlY3Vyc2l2ZWx5KClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxheUFmdGVyRXhlY3V0aW9uKCksXG4gICAgICAgICAgICAgICAgYmFycmllcnMud2FpdCgpLFxuICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4udGhpcy5fZWxlbWVudHNdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RhcmdldEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzWzBdID0gdGhpcy5fdGFyZ2V0RWxlbWVudDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==