"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const is_window_iframe_1 = __importDefault(require("./utils/is-window-iframe"));
// @ts-ignore
const hammerhead_1 = require("../../client/driver/deps/hammerhead");
// @ts-ignore
const domUtils = __importStar(require("../../client/core/utils/dom"));
function ensureImageMap(imgElement, areaElement) {
    return hammerhead_1.Promise.resolve(domUtils.closest(areaElement, 'map'))
        .then((mapElement) => {
        return mapElement && mapElement.name === domUtils.getImgMapName(imgElement) ? areaElement : imgElement;
    });
}
function findElementOrNonEmptyChildFromPoint(point, element) {
    return hammerhead_1.Promise.resolve(adapter_1.adapter.position.getElementFromPoint(point))
        .then((topElement) => {
        return hammerhead_1.Promise.resolve(domUtils.containsElement(element, topElement))
            .then((containsEl) => containsEl && domUtils.getNodeText(topElement))
            .then((isNonEmptyChild) => isNonEmptyChild || topElement && domUtils.isNodeEqual(topElement, element) ? topElement : null);
    });
}
function correctTopElementByExpectedElement(topElement, expectedElement) {
    if (!expectedElement || !topElement || domUtils.isNodeEqual(topElement, expectedElement))
        return topElement;
    const isTREFElement = domUtils.getTagName(expectedElement) === 'tref';
    // NOTE: 'document.elementFromPoint' can't find these types of elements
    if (isTREFElement)
        return expectedElement;
    // NOTE: T299665 - Incorrect click automation for images with an associated map element in Firefox
    // All browsers return the <area> element from document.getElementFromPoint, but
    // Firefox returns the <img> element. We should accomplish this for Firefox as well.
    const isImageMapArea = domUtils.getTagName(expectedElement) === 'area' && domUtils.isImgElement(topElement);
    if (hammerhead_1.utils.browser.isFirefox && isImageMapArea)
        return ensureImageMap(topElement, expectedElement);
    // NOTE: try to find a multi-line link by its rectangle (T163678)
    return hammerhead_1.Promise.resolve(domUtils.closest(expectedElement, 'a'))
        .then((anchor) => !!anchor)
        .then((isLinkOrChildExpected) => {
        if (!isLinkOrChildExpected)
            return false;
        return hammerhead_1.Promise.resolve(domUtils.containsElement(expectedElement, topElement))
            .then((containsElement) => containsElement && domUtils.getNodeText(topElement))
            .then((isTopElementChildOfLink) => !isTopElementChildOfLink && domUtils.getNodeText(expectedElement));
    })
        .then((shouldSearchForMultilineLink) => {
        if (!shouldSearchForMultilineLink)
            return topElement;
        return hammerhead_1.Promise.resolve(adapter_1.adapter.position.getClientDimensions(expectedElement))
            .then((linkRect) => findElementOrNonEmptyChildFromPoint({ x: linkRect.right - 1, y: linkRect.top + 1 }, expectedElement)
            .then((el) => el || findElementOrNonEmptyChildFromPoint({ x: linkRect.left + 1, y: linkRect.bottom - 1 }, expectedElement))
            .then((el) => el || topElement));
    });
}
function getElementFromPoint(point, win, expectedEl) {
    return adapter_1.adapter.getElementExceptUI(point)
        .then((topElement) => {
        // NOTE: when trying to get an element by elementFromPoint in iframe and the target
        // element is under any of shadow-ui elements, you will get null (only in IE).
        // In this case, you should hide a top window's shadow-ui root to obtain an element.
        let resChain = hammerhead_1.Promise.resolve(topElement);
        if (!topElement && is_window_iframe_1.default(win) && point.x > 0 && point.y > 0)
            resChain = resChain.then(() => adapter_1.adapter.getElementExceptUI(point, true));
        return resChain.then((element) => correctTopElementByExpectedElement(element, expectedEl));
    });
}
exports.default = getElementFromPoint;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,